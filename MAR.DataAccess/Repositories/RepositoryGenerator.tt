<#@ template debug="true" hostspecific="false" language="VB" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="Microsoft.VisualBasic" #>
<#@ assembly name="Microsoft.SqlServer.Smo" #>
<#@ assembly name="Microsoft.SqlServer.ConnectionInfo" #>
<#@ assembly name="Microsoft.SqlServer.Management.Sdk.Sfc" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System" #>
<#@ import namespace="Microsoft.SqlServer.Management.Smo" #>
<#@ import namespace="Microsoft.SqlServer.Management.Sdk.Sfc" #>
<#@ import namespace="Microsoft.VisualBasic" #>
<#@ output extension=".T4.cs" #>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using MAR.DataAccess.Tables;

namespace MAR.DataAccess.Repositories {
<#
    Dim _server As String = ".\SQLEXPRESS2008"
    Dim _database As String = "029"

    Dim srv As Server = New Server(_server)
    For each iTable as Table in srv.Databases(_database).Tables
        If NOT iTable.IsSystemObject And Right(iTable.Name,3)<>"OLD" Then
#>

	public partial class <#= iTable.Name #>Repository : BaseRepository {
		// ===============================================
		// G E N E R A T E D ,   D O   N O T   C H A N G E
		// Generated by: Domingo Andujar
		// Create date: <#= DateTime.Now.ToShortDateString #> <#= DateTime.Now.ToShortTimeString #>
		// For Changes: create a separate Partial file or modified the text template and regenerate
		// ===============================================
<#
            Dim HasPKColumns As Boolean = False
            Dim HasFKColumns As Boolean = False
            Dim HasCompoundPK As Boolean = False
            Dim HasModifiedOnColumn As Boolean = False
            Dim HasCreatedOnColumn As Boolean = False
            Dim HasDeletedColumn As Boolean = False
            Dim HasModifiedByColumn As Boolean = False
            Dim HasCreatedByColumn As Boolean = False
            Dim CntPKs As Integer = 0
            For Each iColumn As Column In iTable.Columns
                If iColumn.InPrimaryKey Then
                    HasPKColumns = True
                    CntPKs += 1
                    If CntPKs>1 Then
                        HasCompoundPK = True
                    End If
                ElseIf Right(iColumn.Name,2).ToUpper="ID" Then
                    HasFKColumns = True
                End If
                If UCase(iColumn.Name)="MODIFIEDON" AndAlso UCase(iColumn.DataType.Name)="DATETIME" Then
                    HasModifiedOnColumn = True
                End If
                If UCase(iColumn.Name)="CREATEDON" AndAlso UCase(iColumn.DataType.Name)="DATETIME" Then
                    HasCreatedOnColumn = True
                End If
                If UCase(iColumn.Name)="DELETED" AndAlso UCase(iColumn.DataType.Name)="BIT" Then
                    HasDeletedColumn = True
                End If
                If UCase(iColumn.Name)="MODIFIEDBY" AndAlso UCase(iColumn.DataType.Name)="INT" Then
                    HasModifiedByColumn = True
                End If
                If UCase(iColumn.Name)="CREATEDBY" AndAlso UCase(iColumn.DataType.Name)="INT" Then
                    HasCreatedByColumn = True
                End If
            Next

            Dim TheParamList As New StringBuilder()
            Dim TheParamObject As New StringBuilder()

            'If HasModifiedByColumn OrElse HasCreatedByColumn Then
#>

    /// <summary>
    /// Constructor for repository. Please call this constructor implementing the [Using ... End Using] structure.
    /// </summary>
    /// <param name="pCurrentUser">Current user is required for Delete, Create and Update operations. You may pass in [null] when only Reading data.</param>
    public <#= iTable.Name #>Repository(int pCurrentUserID) : base(pCurrentUserID) 
	{
	}

<#
            'End If

            If HasPKColumns Then
                
                Dim TheColFirstTime As Boolean = True
                For each iColumn as Column in iTable.Columns
                    If iColumn.InPrimaryKey Then
                        Dim ThePreText0 As String = String.Empty
                        If Not TheColFirstTime Then
                            ThePreText0 = ", "
                        End If
                        TheParamList.AppendFormat("{2}{1} p{0}", iColumn.Name, GetNetDataType(iColumn.DataType.Name, False), ThePreText0)
                        TheParamObject.AppendFormat("{1}{0} = p{0}", iColumn.Name, ThePreText0)
                        TheColFirstTime = False
                    End If
                Next


#>

		public <#= iTable.Name #>Record GetOne(<#= TheParamList.ToString #>)
		{
<#
        TheParamObject.Append(", ReadBy = TheReadBy")
#>
			int TheReadBy = _currentUserID;
			return _Query<<#= iTable.Name #>Record>("usp_<#= iTable.Name #>_Select",
												new {<#= TheParamObject.ToString #>}).FirstOrDefault();
		}

<#
            End If 'HasPKColumns

            TheParamList = New StringBuilder()
            TheParamObject = New StringBuilder("ReadBy = TheReadBy")
            If HasDeletedColumn Then
                TheParamList.Append("bool pIncludeDeletedRows = false")
                TheParamObject.Append(", IncludeDeletedRows = pIncludeDeletedRows")
            End If
#>             
		public List<<#= iTable.Name #>Record> GetAll(<#= TheParamList.ToString #>)
		{
			int TheReadBy = _currentUserID;        
			return _Query<<#= iTable.Name #>Record>("usp_<#= iTable.Name #>_Select",
<#
            If TheParamObject.Length>0 Then
#>
                                            new {<#= TheParamObject.ToString #>}).ToList();
<#
            Else
#>
                                            null).ToList();
<#
            End If
#>
		}

<#
            If HasFKColumns OrElse HasCompoundPK Then

                TheParamList = New StringBuilder()
                TheParamObject = New StringBuilder()
                Dim TheColFirstTime As Boolean = True
                For each iColumn as Column in iTable.Columns
                    If (NOT iColumn.InPrimaryKey AndAlso Right(iColumn.Name,2).ToUpper="ID") _
                       OrElse (iColumn.InPrimaryKey AndAlso HasCompoundPK) Then
                        Dim ThePreText0 As String = String.Empty
                        If Not TheColFirstTime Then
                            ThePreText0 = ", "
                        End If
                        TheParamList.AppendFormat("{2} {1} p{0} = null", iColumn.Name, GetNetDataType(iColumn.DataType.Name, True), ThePreText0)
                        TheParamObject.AppendFormat("{1}{0} = p{0}", iColumn.Name, ThePreText0)
                        TheColFirstTime = False
                    End If
                Next

                If HasDeletedColumn Then
                    TheParamList.Append(", bool pIncludeDeletedRows = false")
                    TheParamObject.Append(", IncludeDeletedRows = pIncludeDeletedRows")
                End If
#>
		public List<<#= iTable.Name #>Record> GetWhere(<#= TheParamList.ToString #>)
		{
<#
        TheParamObject.Append(", ReadBy = TheReadBy")
#>
        int TheReadBy =  _currentUserID;
        return _Query<<#= iTable.Name #>Record>("usp_<#= iTable.Name #>_Select",
                                            new {<#= TheParamObject.ToString #>}).ToList();
    }

<#
            End If 'HasFKColumns OrElse HasCompoundPK

            If HasPKColumns AndAlso (HasModifiedByColumn OrElse HasCreatedByColumn) Then

                TheParamList = New StringBuilder()
                TheParamObject = New StringBuilder()
                Dim TheColFirstTime As Boolean = True
                For each iColumn as Column in iTable.Columns
                    If iColumn.InPrimaryKey Then
                        Dim ThePreText0 As String = String.Empty
                        If Not TheColFirstTime Then
                            ThePreText0 = ", "
                        End If
                        TheParamList.AppendFormat("{2}{1} p{0}", iColumn.Name, GetNetDataType(iColumn.DataType.Name, False), ThePreText0)
                        TheParamObject.AppendFormat("{1}{0} = p{0}", iColumn.Name, ThePreText0)
                        TheColFirstTime = False
                    End If
                Next
#>
	public int DeleteOne(<#= TheParamList.ToString #>)
	{
<#
                'If HasModifiedByColumn then
                    TheParamObject.Append(", .DeletedBy = TheDeletedBy")
#>
			int TheDeletedBy =  _currentUserID;        
<#
                'End If
#>
			return _Query<Integer>("usp_<#= iTable.Name #>_Delete",
                                            New With {<#= TheParamObject.ToString #>}).FirstOrDefault();
    }

<#
            End If 'HasPKColumns AndAlso (HasModifiedByColumn OrElse HasCreatedByColumn) 


            If (HasFKColumns OrElse HasCompoundPK) AndAlso (HasModifiedByColumn OrElse HasCreatedByColumn) Then
                
                TheParamList = New StringBuilder()
                TheParamObject = New StringBuilder()
                Dim TheColFirstTime As Boolean = True
                For each iColumn as Column in iTable.Columns
                    If (NOT iColumn.InPrimaryKey AndAlso Right(iColumn.Name,2).ToUpper="ID") _
                       OrElse (iColumn.InPrimaryKey AndAlso HasCompoundPK) Then
                        Dim ThePreText0 As String = String.Empty
                        If Not TheColFirstTime Then
                            ThePreText0 = ", "
                        End If
                        TheParamList.AppendFormat("{2}{1} p{0} = null", iColumn.Name, GetNetDataType(iColumn.DataType.Name, True), ThePreText0)
                        TheParamObject.AppendFormat("{1}{0} = p{0}", iColumn.Name, ThePreText0)
                        TheColFirstTime = False
                    End If
                Next
#>
		public int DeleteWhere(<#= TheParamList.ToString #>)
		{
<#
                'If HasModifiedByColumn then
                    TheParamObject.Append(", .DeletedBy = TheDeletedBy")
#>
			int TheDeletedBy =  _currentUserID;
<#
                'End If
#>
			return _Query<Integer>("usp_<#= iTable.Name #>_Delete",
                                            new {<#= TheParamObject.ToString #>}).FirstOrDefault();
		}

<#
            End If '(HasFKColumns OrElse HasCompoundPK) AndAlso (HasModifiedByColumn OrElse HasCreatedByColumn) 

            If HasPKColumns AndAlso HasModifiedByColumn Then
                
                TheParamObject = New StringBuilder()
                Dim TheColFirstTime As Boolean = True
                For each iColumn as Column in iTable.Columns
                    If UCase(iColumn.Name)<>"DELETED" AndAlso UCase(iColumn.Name)<>"MODIFIEDON" AndAlso UCase(iColumn.Name)<>"MODIFIEDBY" _
                       AndAlso UCase(iColumn.Name)<>"CREATEDON" AndAlso UCase(iColumn.Name)<>"CREATEDBY" Then
                        Dim ThePreText0 As String = String.Empty
                        If Not TheColFirstTime Then
                            ThePreText0 = ", "
                        End If
                        TheParamObject.AppendFormat("{1}{0} = p{2}Object.{0}", iColumn.Name, ThePreText0, iTable.Name)
                        TheColFirstTime = False
                    End If
                Next
                TheParamObject.Append(", .ModifiedBy = TheModifiedBy")
#>
		public int Update(<#= iTable.Name #>Record p<#= iTable.Name #>Object)
		{
			int TheModifiedBy = _currentUserID;
			return _Query<Integer>("usp_<#= iTable.Name #>_Update",
                                            new {<#= TheParamObject.ToString #>}).FirstOrDefault();
		}

<#
            End If 'HasPKColumns AndAlso HasModifiedByColumn 

            If HasCreatedByColumn Then
                
                TheParamObject = New StringBuilder()
                Dim TheColFirstTime As Boolean = True
                For each iColumn as Column in iTable.Columns
                    If Not iColumn.Identity _
                       AndAlso UCase(iColumn.Name)<>"DELETED" AndAlso UCase(iColumn.Name)<>"MODIFIEDON" AndAlso UCase(iColumn.Name)<>"CREATEDBY" _
                       AndAlso UCase(iColumn.Name)<>"CREATEDON" AndAlso UCase(iColumn.Name)<>"MODIFIEDBY" Then

                        Dim ThePreText0 As String = String.Empty
                        If Not TheColFirstTime Then
                            ThePreText0 = ", "
                        End If
                        TheParamObject.AppendFormat("{1}.{0} = p{2}Object.{0}", iColumn.Name, ThePreText0, iTable.Name)
                        TheColFirstTime = False
                    End If
                Next
                TheParamObject.Append(", .CreatedBy = TheCreatedBy")
#>
		public decimal Create(<#= iTable.Name #>Record p<#= iTable.Name #>Object)
		{
			int TheCreatedBy = _currentUserID;
			return _Query<Decimal>("usp_<#= iTable.Name #>_Insert",
                                            New With {<#= TheParamObject.ToString #>}).FirstOrDefault();
		}

<#
            End If 'HasPKColumns AndAlso HasModifiedByColumn 
#> 

	}
<#
        End If 'NOT iTable.IsSystemObject
    Next 'Table
#>
}


<#+
        Public Shared Function GetNetDataType(sqlDataTypeName As String, isNullable as Boolean) As String
            Dim TheResult as String
            Select Case sqlDataTypeName.ToLower()
                Case "bigint"
                    TheResult =  "int64"
                Case "binary"
                    TheResult =  "byte()"
                Case "bit"
                    TheResult =  "bool"
                Case "char"
                    TheResult =  "char"
                Case "cursor"
                    TheResult =  "object"
                Case "datetime"
                    TheResult =  "datetime"
                Case "decimal"
                    TheResult =  "decimal"
                Case "float"
                    TheResult =  "double"
                Case "int"
                    TheResult =  "int"
                Case "money"
                    TheResult =  "decimal"
                Case "nchar"
                    TheResult =  "string"
                Case "numeric"
                    TheResult =  "decimal"
                Case "nvarchar"
                    TheResult =  "string"
                Case "real"
                    TheResult =  "single"
                Case "smallint"
                    TheResult =  "int16"
                Case "text"
                    TheResult =  "string"
                Case "tinyint"
                    TheResult =  "byte"
                Case "varbinary"
                    TheResult =  "byte()"
                Case "xml"
                    TheResult =  "string"
                Case "varchar"
                    TheResult =  "string"
                Case "uniqueidentifier"
                    TheResult =  "guid"
                Case "date"
                    TheResult =  "datetime"
                Case "smalldatetime"
                    TheResult =  "datetime"
                Case "image"
                    TheResult =  "byte()"
                Case Else
                    TheResult =  "object"
            End Select

            If isNullable AndAlso TheResult<>"string" AndAlso TheResult<>"object" _
                          AndAlso TheResult<>"byte()" Then            
                Return TheResult & "?"
            Else
                Return TheResult
            End If
        End Function
#>