//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MAR.DataAccess.EFRepositories.StoreProcedures
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SPContext : DbContext
    {
        public SPContext()
            : base(MAR.DataAccess.UnitOfWork.GenericMethods.SetEfConnectionString("EFRepositories.StoreProcedures.SPContext", Config.ConfigEnums.DBConnection2))
        {
            base.Configuration.ProxyCreationEnabled = false;
            base.Configuration.LazyLoadingEnabled = false;
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        [DbFunction("Entities", "FBancaSumaLoterias")]
        public virtual IQueryable<FBancaSumaLoterias_Result> FBancaSumaLoterias(Nullable<int> ban, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has)
        {
            var banParameter = ban.HasValue ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FBancaSumaLoterias_Result>("[Entities].[FBancaSumaLoterias](@ban, @dia, @des, @has)", banParameter, diaParameter, desParameter, hasParameter);
        }
    
        [DbFunction("Entities", "FBancaSumaProductos")]
        public virtual IQueryable<FBancaSumaProductos_Result> FBancaSumaProductos(Nullable<int> ban, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has)
        {
            var banParameter = ban.HasValue ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FBancaSumaProductos_Result>("[Entities].[FBancaSumaProductos](@ban, @dia, @des, @has)", banParameter, diaParameter, desParameter, hasParameter);
        }
    
        [DbFunction("Entities", "FContabilidad")]
        public virtual IQueryable<FContabilidad_Result> FContabilidad(string ban, string gru, Nullable<int> cue, Nullable<int> rif, Nullable<int> lot, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has, string ord)
        {
            var banParameter = ban != null ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(string));
    
            var gruParameter = gru != null ?
                new ObjectParameter("gru", gru) :
                new ObjectParameter("gru", typeof(string));
    
            var cueParameter = cue.HasValue ?
                new ObjectParameter("cue", cue) :
                new ObjectParameter("cue", typeof(int));
    
            var rifParameter = rif.HasValue ?
                new ObjectParameter("rif", rif) :
                new ObjectParameter("rif", typeof(int));
    
            var lotParameter = lot.HasValue ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            var ordParameter = ord != null ?
                new ObjectParameter("ord", ord) :
                new ObjectParameter("ord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FContabilidad_Result>("[Entities].[FContabilidad](@ban, @gru, @cue, @rif, @lot, @dia, @des, @has, @ord)", banParameter, gruParameter, cueParameter, rifParameter, lotParameter, diaParameter, desParameter, hasParameter, ordParameter);
        }
    
        [DbFunction("Entities", "FDiaConsolida2")]
        public virtual IQueryable<FDiaConsolida2_Result> FDiaConsolida2(string ban, string gru, Nullable<int> cue, Nullable<int> rif, Nullable<int> lot, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has, string ord)
        {
            var banParameter = ban != null ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(string));
    
            var gruParameter = gru != null ?
                new ObjectParameter("gru", gru) :
                new ObjectParameter("gru", typeof(string));
    
            var cueParameter = cue.HasValue ?
                new ObjectParameter("cue", cue) :
                new ObjectParameter("cue", typeof(int));
    
            var rifParameter = rif.HasValue ?
                new ObjectParameter("rif", rif) :
                new ObjectParameter("rif", typeof(int));
    
            var lotParameter = lot.HasValue ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            var ordParameter = ord != null ?
                new ObjectParameter("ord", ord) :
                new ObjectParameter("ord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FDiaConsolida2_Result>("[Entities].[FDiaConsolida2](@ban, @gru, @cue, @rif, @lot, @dia, @des, @has, @ord)", banParameter, gruParameter, cueParameter, rifParameter, lotParameter, diaParameter, desParameter, hasParameter, ordParameter);
        }
    
        [DbFunction("Entities", "FDiaConsolida3")]
        public virtual IQueryable<FDiaConsolida3_Result> FDiaConsolida3(string ban, string gru, Nullable<int> cue, Nullable<int> rif, Nullable<int> lot, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has, string ord)
        {
            var banParameter = ban != null ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(string));
    
            var gruParameter = gru != null ?
                new ObjectParameter("gru", gru) :
                new ObjectParameter("gru", typeof(string));
    
            var cueParameter = cue.HasValue ?
                new ObjectParameter("cue", cue) :
                new ObjectParameter("cue", typeof(int));
    
            var rifParameter = rif.HasValue ?
                new ObjectParameter("rif", rif) :
                new ObjectParameter("rif", typeof(int));
    
            var lotParameter = lot.HasValue ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            var ordParameter = ord != null ?
                new ObjectParameter("ord", ord) :
                new ObjectParameter("ord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FDiaConsolida3_Result>("[Entities].[FDiaConsolida3](@ban, @gru, @cue, @rif, @lot, @dia, @des, @has, @ord)", banParameter, gruParameter, cueParameter, rifParameter, lotParameter, diaParameter, desParameter, hasParameter, ordParameter);
        }
    
        [DbFunction("Entities", "FDiaConsolida4")]
        public virtual IQueryable<FDiaConsolida4_Result> FDiaConsolida4(string ban, string gru, Nullable<int> cue, Nullable<int> rif, Nullable<int> lot, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has, string ord)
        {
            var banParameter = ban != null ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(string));
    
            var gruParameter = gru != null ?
                new ObjectParameter("gru", gru) :
                new ObjectParameter("gru", typeof(string));
    
            var cueParameter = cue.HasValue ?
                new ObjectParameter("cue", cue) :
                new ObjectParameter("cue", typeof(int));
    
            var rifParameter = rif.HasValue ?
                new ObjectParameter("rif", rif) :
                new ObjectParameter("rif", typeof(int));
    
            var lotParameter = lot.HasValue ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            var ordParameter = ord != null ?
                new ObjectParameter("ord", ord) :
                new ObjectParameter("ord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FDiaConsolida4_Result>("[Entities].[FDiaConsolida4](@ban, @gru, @cue, @rif, @lot, @dia, @des, @has, @ord)", banParameter, gruParameter, cueParameter, rifParameter, lotParameter, diaParameter, desParameter, hasParameter, ordParameter);
        }
    
        [DbFunction("Entities", "FDiaConsolida5")]
        public virtual IQueryable<FDiaConsolida5_Result> FDiaConsolida5(string ban, string gru, Nullable<int> cue, Nullable<int> rif, Nullable<int> lot, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has, string ord)
        {
            var banParameter = ban != null ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(string));
    
            var gruParameter = gru != null ?
                new ObjectParameter("gru", gru) :
                new ObjectParameter("gru", typeof(string));
    
            var cueParameter = cue.HasValue ?
                new ObjectParameter("cue", cue) :
                new ObjectParameter("cue", typeof(int));
    
            var rifParameter = rif.HasValue ?
                new ObjectParameter("rif", rif) :
                new ObjectParameter("rif", typeof(int));
    
            var lotParameter = lot.HasValue ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            var ordParameter = ord != null ?
                new ObjectParameter("ord", ord) :
                new ObjectParameter("ord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FDiaConsolida5_Result>("[Entities].[FDiaConsolida5](@ban, @gru, @cue, @rif, @lot, @dia, @des, @has, @ord)", banParameter, gruParameter, cueParameter, rifParameter, lotParameter, diaParameter, desParameter, hasParameter, ordParameter);
        }
    
        [DbFunction("Entities", "FDiaProductos")]
        public virtual IQueryable<FDiaProductos_Result> FDiaProductos(string ban, string gru, Nullable<int> cue, Nullable<int> rif, Nullable<int> lot, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has, string ord)
        {
            var banParameter = ban != null ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(string));
    
            var gruParameter = gru != null ?
                new ObjectParameter("gru", gru) :
                new ObjectParameter("gru", typeof(string));
    
            var cueParameter = cue.HasValue ?
                new ObjectParameter("cue", cue) :
                new ObjectParameter("cue", typeof(int));
    
            var rifParameter = rif.HasValue ?
                new ObjectParameter("rif", rif) :
                new ObjectParameter("rif", typeof(int));
    
            var lotParameter = lot.HasValue ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            var ordParameter = ord != null ?
                new ObjectParameter("ord", ord) :
                new ObjectParameter("ord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FDiaProductos_Result>("[Entities].[FDiaProductos](@ban, @gru, @cue, @rif, @lot, @dia, @des, @has, @ord)", banParameter, gruParameter, cueParameter, rifParameter, lotParameter, diaParameter, desParameter, hasParameter, ordParameter);
        }
    
        [DbFunction("Entities", "FDiasReclamoGanadores")]
        public virtual IQueryable<FDiasReclamoGanadores_Result> FDiasReclamoGanadores(string ban)
        {
            var banParameter = ban != null ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FDiasReclamoGanadores_Result>("[Entities].[FDiasReclamoGanadores](@ban)", banParameter);
        }
    
        [DbFunction("Entities", "FDiaSumaProductos")]
        public virtual IQueryable<FDiaSumaProductos_Result> FDiaSumaProductos(Nullable<int> ban, Nullable<System.DateTime> des, Nullable<System.DateTime> has)
        {
            var banParameter = ban.HasValue ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(int));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FDiaSumaProductos_Result>("[Entities].[FDiaSumaProductos](@ban, @des, @has)", banParameter, desParameter, hasParameter);
        }
    
        [DbFunction("Entities", "FFinanzaBanca")]
        public virtual IQueryable<FFinanzaBanca_Result> FFinanzaBanca(string ban, string gru, Nullable<int> cue, Nullable<int> rif, Nullable<int> lot, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has, string ord)
        {
            var banParameter = ban != null ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(string));
    
            var gruParameter = gru != null ?
                new ObjectParameter("gru", gru) :
                new ObjectParameter("gru", typeof(string));
    
            var cueParameter = cue.HasValue ?
                new ObjectParameter("cue", cue) :
                new ObjectParameter("cue", typeof(int));
    
            var rifParameter = rif.HasValue ?
                new ObjectParameter("rif", rif) :
                new ObjectParameter("rif", typeof(int));
    
            var lotParameter = lot.HasValue ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            var ordParameter = ord != null ?
                new ObjectParameter("ord", ord) :
                new ObjectParameter("ord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FFinanzaBanca_Result>("[Entities].[FFinanzaBanca](@ban, @gru, @cue, @rif, @lot, @dia, @des, @has, @ord)", banParameter, gruParameter, cueParameter, rifParameter, lotParameter, diaParameter, desParameter, hasParameter, ordParameter);
        }
    
        [DbFunction("Entities", "FFinanzaBancaConsolida")]
        public virtual IQueryable<FFinanzaBancaConsolida_Result> FFinanzaBancaConsolida(string ban, string gru, Nullable<int> cue, Nullable<int> rif, Nullable<int> lot, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has, string ord)
        {
            var banParameter = ban != null ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(string));
    
            var gruParameter = gru != null ?
                new ObjectParameter("gru", gru) :
                new ObjectParameter("gru", typeof(string));
    
            var cueParameter = cue.HasValue ?
                new ObjectParameter("cue", cue) :
                new ObjectParameter("cue", typeof(int));
    
            var rifParameter = rif.HasValue ?
                new ObjectParameter("rif", rif) :
                new ObjectParameter("rif", typeof(int));
    
            var lotParameter = lot.HasValue ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            var ordParameter = ord != null ?
                new ObjectParameter("ord", ord) :
                new ObjectParameter("ord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FFinanzaBancaConsolida_Result>("[Entities].[FFinanzaBancaConsolida](@ban, @gru, @cue, @rif, @lot, @dia, @des, @has, @ord)", banParameter, gruParameter, cueParameter, rifParameter, lotParameter, diaParameter, desParameter, hasParameter, ordParameter);
        }
    
        [DbFunction("Entities", "FFinanzaBancaConsolida2")]
        public virtual IQueryable<FFinanzaBancaConsolida2_Result> FFinanzaBancaConsolida2(string ban, string gru, Nullable<int> cue, Nullable<int> rif, Nullable<int> lot, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has, string ord)
        {
            var banParameter = ban != null ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(string));
    
            var gruParameter = gru != null ?
                new ObjectParameter("gru", gru) :
                new ObjectParameter("gru", typeof(string));
    
            var cueParameter = cue.HasValue ?
                new ObjectParameter("cue", cue) :
                new ObjectParameter("cue", typeof(int));
    
            var rifParameter = rif.HasValue ?
                new ObjectParameter("rif", rif) :
                new ObjectParameter("rif", typeof(int));
    
            var lotParameter = lot.HasValue ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            var ordParameter = ord != null ?
                new ObjectParameter("ord", ord) :
                new ObjectParameter("ord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FFinanzaBancaConsolida2_Result>("[Entities].[FFinanzaBancaConsolida2](@ban, @gru, @cue, @rif, @lot, @dia, @des, @has, @ord)", banParameter, gruParameter, cueParameter, rifParameter, lotParameter, diaParameter, desParameter, hasParameter, ordParameter);
        }
    
        [DbFunction("Entities", "FFinanzaBancaConsolida3")]
        public virtual IQueryable<FFinanzaBancaConsolida3_Result> FFinanzaBancaConsolida3(string ban, string gru, Nullable<int> cue, Nullable<int> rif, Nullable<int> lot, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has, string ord)
        {
            var banParameter = ban != null ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(string));
    
            var gruParameter = gru != null ?
                new ObjectParameter("gru", gru) :
                new ObjectParameter("gru", typeof(string));
    
            var cueParameter = cue.HasValue ?
                new ObjectParameter("cue", cue) :
                new ObjectParameter("cue", typeof(int));
    
            var rifParameter = rif.HasValue ?
                new ObjectParameter("rif", rif) :
                new ObjectParameter("rif", typeof(int));
    
            var lotParameter = lot.HasValue ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            var ordParameter = ord != null ?
                new ObjectParameter("ord", ord) :
                new ObjectParameter("ord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FFinanzaBancaConsolida3_Result>("[Entities].[FFinanzaBancaConsolida3](@ban, @gru, @cue, @rif, @lot, @dia, @des, @has, @ord)", banParameter, gruParameter, cueParameter, rifParameter, lotParameter, diaParameter, desParameter, hasParameter, ordParameter);
        }
    
        [DbFunction("Entities", "FFinanzaBancaConsolida4")]
        public virtual IQueryable<FFinanzaBancaConsolida4_Result> FFinanzaBancaConsolida4(string ban, string gru, Nullable<int> cue, Nullable<int> rif, Nullable<int> lot, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has, string ord)
        {
            var banParameter = ban != null ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(string));
    
            var gruParameter = gru != null ?
                new ObjectParameter("gru", gru) :
                new ObjectParameter("gru", typeof(string));
    
            var cueParameter = cue.HasValue ?
                new ObjectParameter("cue", cue) :
                new ObjectParameter("cue", typeof(int));
    
            var rifParameter = rif.HasValue ?
                new ObjectParameter("rif", rif) :
                new ObjectParameter("rif", typeof(int));
    
            var lotParameter = lot.HasValue ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            var ordParameter = ord != null ?
                new ObjectParameter("ord", ord) :
                new ObjectParameter("ord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FFinanzaBancaConsolida4_Result>("[Entities].[FFinanzaBancaConsolida4](@ban, @gru, @cue, @rif, @lot, @dia, @des, @has, @ord)", banParameter, gruParameter, cueParameter, rifParameter, lotParameter, diaParameter, desParameter, hasParameter, ordParameter);
        }
    
        [DbFunction("Entities", "FFinanzaBancaConsolida5")]
        public virtual IQueryable<FFinanzaBancaConsolida5_Result> FFinanzaBancaConsolida5(string ban, string gru, Nullable<int> cue, Nullable<int> rif, Nullable<int> lot, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has, string ord)
        {
            var banParameter = ban != null ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(string));
    
            var gruParameter = gru != null ?
                new ObjectParameter("gru", gru) :
                new ObjectParameter("gru", typeof(string));
    
            var cueParameter = cue.HasValue ?
                new ObjectParameter("cue", cue) :
                new ObjectParameter("cue", typeof(int));
    
            var rifParameter = rif.HasValue ?
                new ObjectParameter("rif", rif) :
                new ObjectParameter("rif", typeof(int));
    
            var lotParameter = lot.HasValue ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            var ordParameter = ord != null ?
                new ObjectParameter("ord", ord) :
                new ObjectParameter("ord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FFinanzaBancaConsolida5_Result>("[Entities].[FFinanzaBancaConsolida5](@ban, @gru, @cue, @rif, @lot, @dia, @des, @has, @ord)", banParameter, gruParameter, cueParameter, rifParameter, lotParameter, diaParameter, desParameter, hasParameter, ordParameter);
        }
    
        [DbFunction("Entities", "FFinanzaBancaDia")]
        public virtual IQueryable<FFinanzaBancaDia_Result> FFinanzaBancaDia(string ban, string gru, Nullable<int> cue, Nullable<int> rif, Nullable<int> lot, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has, string ord)
        {
            var banParameter = ban != null ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(string));
    
            var gruParameter = gru != null ?
                new ObjectParameter("gru", gru) :
                new ObjectParameter("gru", typeof(string));
    
            var cueParameter = cue.HasValue ?
                new ObjectParameter("cue", cue) :
                new ObjectParameter("cue", typeof(int));
    
            var rifParameter = rif.HasValue ?
                new ObjectParameter("rif", rif) :
                new ObjectParameter("rif", typeof(int));
    
            var lotParameter = lot.HasValue ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            var ordParameter = ord != null ?
                new ObjectParameter("ord", ord) :
                new ObjectParameter("ord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FFinanzaBancaDia_Result>("[Entities].[FFinanzaBancaDia](@ban, @gru, @cue, @rif, @lot, @dia, @des, @has, @ord)", banParameter, gruParameter, cueParameter, rifParameter, lotParameter, diaParameter, desParameter, hasParameter, ordParameter);
        }
    
        [DbFunction("Entities", "FFinanzaBancaDiaTotal")]
        public virtual IQueryable<FFinanzaBancaDiaTotal_Result> FFinanzaBancaDiaTotal(string ban, string gru, Nullable<int> cue, Nullable<int> rif, Nullable<int> lot, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has, string ord)
        {
            var banParameter = ban != null ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(string));
    
            var gruParameter = gru != null ?
                new ObjectParameter("gru", gru) :
                new ObjectParameter("gru", typeof(string));
    
            var cueParameter = cue.HasValue ?
                new ObjectParameter("cue", cue) :
                new ObjectParameter("cue", typeof(int));
    
            var rifParameter = rif.HasValue ?
                new ObjectParameter("rif", rif) :
                new ObjectParameter("rif", typeof(int));
    
            var lotParameter = lot.HasValue ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            var ordParameter = ord != null ?
                new ObjectParameter("ord", ord) :
                new ObjectParameter("ord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FFinanzaBancaDiaTotal_Result>("[Entities].[FFinanzaBancaDiaTotal](@ban, @gru, @cue, @rif, @lot, @dia, @des, @has, @ord)", banParameter, gruParameter, cueParameter, rifParameter, lotParameter, diaParameter, desParameter, hasParameter, ordParameter);
        }
    
        [DbFunction("Entities", "FFinanzaBancaFecha")]
        public virtual IQueryable<FFinanzaBancaFecha_Result> FFinanzaBancaFecha(string ban, string gru, Nullable<int> cue, Nullable<int> rif, Nullable<int> lot, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has, string ord)
        {
            var banParameter = ban != null ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(string));
    
            var gruParameter = gru != null ?
                new ObjectParameter("gru", gru) :
                new ObjectParameter("gru", typeof(string));
    
            var cueParameter = cue.HasValue ?
                new ObjectParameter("cue", cue) :
                new ObjectParameter("cue", typeof(int));
    
            var rifParameter = rif.HasValue ?
                new ObjectParameter("rif", rif) :
                new ObjectParameter("rif", typeof(int));
    
            var lotParameter = lot.HasValue ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            var ordParameter = ord != null ?
                new ObjectParameter("ord", ord) :
                new ObjectParameter("ord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FFinanzaBancaFecha_Result>("[Entities].[FFinanzaBancaFecha](@ban, @gru, @cue, @rif, @lot, @dia, @des, @has, @ord)", banParameter, gruParameter, cueParameter, rifParameter, lotParameter, diaParameter, desParameter, hasParameter, ordParameter);
        }
    
        [DbFunction("Entities", "FFinanzaBancaHis")]
        public virtual IQueryable<FFinanzaBancaHis_Result> FFinanzaBancaHis(string ban, string gru, Nullable<int> cue, Nullable<int> rif, Nullable<int> lot, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has, string ord)
        {
            var banParameter = ban != null ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(string));
    
            var gruParameter = gru != null ?
                new ObjectParameter("gru", gru) :
                new ObjectParameter("gru", typeof(string));
    
            var cueParameter = cue.HasValue ?
                new ObjectParameter("cue", cue) :
                new ObjectParameter("cue", typeof(int));
    
            var rifParameter = rif.HasValue ?
                new ObjectParameter("rif", rif) :
                new ObjectParameter("rif", typeof(int));
    
            var lotParameter = lot.HasValue ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            var ordParameter = ord != null ?
                new ObjectParameter("ord", ord) :
                new ObjectParameter("ord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FFinanzaBancaHis_Result>("[Entities].[FFinanzaBancaHis](@ban, @gru, @cue, @rif, @lot, @dia, @des, @has, @ord)", banParameter, gruParameter, cueParameter, rifParameter, lotParameter, diaParameter, desParameter, hasParameter, ordParameter);
        }
    
        [DbFunction("Entities", "FFinanzaBancaHisTotal")]
        public virtual IQueryable<FFinanzaBancaHisTotal_Result> FFinanzaBancaHisTotal(string ban, string gru, Nullable<int> cue, Nullable<int> rif, Nullable<int> lot, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has, string ord)
        {
            var banParameter = ban != null ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(string));
    
            var gruParameter = gru != null ?
                new ObjectParameter("gru", gru) :
                new ObjectParameter("gru", typeof(string));
    
            var cueParameter = cue.HasValue ?
                new ObjectParameter("cue", cue) :
                new ObjectParameter("cue", typeof(int));
    
            var rifParameter = rif.HasValue ?
                new ObjectParameter("rif", rif) :
                new ObjectParameter("rif", typeof(int));
    
            var lotParameter = lot.HasValue ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            var ordParameter = ord != null ?
                new ObjectParameter("ord", ord) :
                new ObjectParameter("ord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FFinanzaBancaHisTotal_Result>("[Entities].[FFinanzaBancaHisTotal](@ban, @gru, @cue, @rif, @lot, @dia, @des, @has, @ord)", banParameter, gruParameter, cueParameter, rifParameter, lotParameter, diaParameter, desParameter, hasParameter, ordParameter);
        }
    
        [DbFunction("Entities", "FFinanzaBancaTotal")]
        public virtual IQueryable<FFinanzaBancaTotal_Result> FFinanzaBancaTotal(string ban, string gru, Nullable<int> cue, Nullable<int> rif, Nullable<int> lot, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has, string ord)
        {
            var banParameter = ban != null ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(string));
    
            var gruParameter = gru != null ?
                new ObjectParameter("gru", gru) :
                new ObjectParameter("gru", typeof(string));
    
            var cueParameter = cue.HasValue ?
                new ObjectParameter("cue", cue) :
                new ObjectParameter("cue", typeof(int));
    
            var rifParameter = rif.HasValue ?
                new ObjectParameter("rif", rif) :
                new ObjectParameter("rif", typeof(int));
    
            var lotParameter = lot.HasValue ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            var ordParameter = ord != null ?
                new ObjectParameter("ord", ord) :
                new ObjectParameter("ord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FFinanzaBancaTotal_Result>("[Entities].[FFinanzaBancaTotal](@ban, @gru, @cue, @rif, @lot, @dia, @des, @has, @ord)", banParameter, gruParameter, cueParameter, rifParameter, lotParameter, diaParameter, desParameter, hasParameter, ordParameter);
        }
    
        [DbFunction("Entities", "FFinanzaBancaTotalFecha")]
        public virtual IQueryable<FFinanzaBancaTotalFecha_Result> FFinanzaBancaTotalFecha(string ban, string gru, Nullable<int> cue, Nullable<int> rif, Nullable<int> lot, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has, string ord)
        {
            var banParameter = ban != null ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(string));
    
            var gruParameter = gru != null ?
                new ObjectParameter("gru", gru) :
                new ObjectParameter("gru", typeof(string));
    
            var cueParameter = cue.HasValue ?
                new ObjectParameter("cue", cue) :
                new ObjectParameter("cue", typeof(int));
    
            var rifParameter = rif.HasValue ?
                new ObjectParameter("rif", rif) :
                new ObjectParameter("rif", typeof(int));
    
            var lotParameter = lot.HasValue ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            var ordParameter = ord != null ?
                new ObjectParameter("ord", ord) :
                new ObjectParameter("ord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FFinanzaBancaTotalFecha_Result>("[Entities].[FFinanzaBancaTotalFecha](@ban, @gru, @cue, @rif, @lot, @dia, @des, @has, @ord)", banParameter, gruParameter, cueParameter, rifParameter, lotParameter, diaParameter, desParameter, hasParameter, ordParameter);
        }
    
        [DbFunction("Entities", "FFinanzaDiaConsolida")]
        public virtual IQueryable<FFinanzaDiaConsolida_Result> FFinanzaDiaConsolida(string ban, string gru, Nullable<int> cue, Nullable<int> rif, Nullable<int> lot, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has, string ord)
        {
            var banParameter = ban != null ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(string));
    
            var gruParameter = gru != null ?
                new ObjectParameter("gru", gru) :
                new ObjectParameter("gru", typeof(string));
    
            var cueParameter = cue.HasValue ?
                new ObjectParameter("cue", cue) :
                new ObjectParameter("cue", typeof(int));
    
            var rifParameter = rif.HasValue ?
                new ObjectParameter("rif", rif) :
                new ObjectParameter("rif", typeof(int));
    
            var lotParameter = lot.HasValue ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            var ordParameter = ord != null ?
                new ObjectParameter("ord", ord) :
                new ObjectParameter("ord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FFinanzaDiaConsolida_Result>("[Entities].[FFinanzaDiaConsolida](@ban, @gru, @cue, @rif, @lot, @dia, @des, @has, @ord)", banParameter, gruParameter, cueParameter, rifParameter, lotParameter, diaParameter, desParameter, hasParameter, ordParameter);
        }
    
        [DbFunction("Entities", "FFinanzaDiaConsolida2")]
        public virtual IQueryable<FFinanzaDiaConsolida2_Result> FFinanzaDiaConsolida2(string ban, string gru, Nullable<int> cue, Nullable<int> rif, Nullable<int> lot, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has, string ord)
        {
            var banParameter = ban != null ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(string));
    
            var gruParameter = gru != null ?
                new ObjectParameter("gru", gru) :
                new ObjectParameter("gru", typeof(string));
    
            var cueParameter = cue.HasValue ?
                new ObjectParameter("cue", cue) :
                new ObjectParameter("cue", typeof(int));
    
            var rifParameter = rif.HasValue ?
                new ObjectParameter("rif", rif) :
                new ObjectParameter("rif", typeof(int));
    
            var lotParameter = lot.HasValue ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            var ordParameter = ord != null ?
                new ObjectParameter("ord", ord) :
                new ObjectParameter("ord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FFinanzaDiaConsolida2_Result>("[Entities].[FFinanzaDiaConsolida2](@ban, @gru, @cue, @rif, @lot, @dia, @des, @has, @ord)", banParameter, gruParameter, cueParameter, rifParameter, lotParameter, diaParameter, desParameter, hasParameter, ordParameter);
        }
    
        [DbFunction("Entities", "FFinanzaDiaConsolida3")]
        public virtual IQueryable<FFinanzaDiaConsolida3_Result> FFinanzaDiaConsolida3(string ban, string gru, Nullable<int> cue, Nullable<int> rif, Nullable<int> lot, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has, string ord)
        {
            var banParameter = ban != null ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(string));
    
            var gruParameter = gru != null ?
                new ObjectParameter("gru", gru) :
                new ObjectParameter("gru", typeof(string));
    
            var cueParameter = cue.HasValue ?
                new ObjectParameter("cue", cue) :
                new ObjectParameter("cue", typeof(int));
    
            var rifParameter = rif.HasValue ?
                new ObjectParameter("rif", rif) :
                new ObjectParameter("rif", typeof(int));
    
            var lotParameter = lot.HasValue ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            var ordParameter = ord != null ?
                new ObjectParameter("ord", ord) :
                new ObjectParameter("ord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FFinanzaDiaConsolida3_Result>("[Entities].[FFinanzaDiaConsolida3](@ban, @gru, @cue, @rif, @lot, @dia, @des, @has, @ord)", banParameter, gruParameter, cueParameter, rifParameter, lotParameter, diaParameter, desParameter, hasParameter, ordParameter);
        }
    
        [DbFunction("Entities", "FFinanzaDiaConsolida4")]
        public virtual IQueryable<FFinanzaDiaConsolida4_Result> FFinanzaDiaConsolida4(string ban, string gru, Nullable<int> cue, Nullable<int> rif, Nullable<int> lot, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has, string ord)
        {
            var banParameter = ban != null ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(string));
    
            var gruParameter = gru != null ?
                new ObjectParameter("gru", gru) :
                new ObjectParameter("gru", typeof(string));
    
            var cueParameter = cue.HasValue ?
                new ObjectParameter("cue", cue) :
                new ObjectParameter("cue", typeof(int));
    
            var rifParameter = rif.HasValue ?
                new ObjectParameter("rif", rif) :
                new ObjectParameter("rif", typeof(int));
    
            var lotParameter = lot.HasValue ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            var ordParameter = ord != null ?
                new ObjectParameter("ord", ord) :
                new ObjectParameter("ord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FFinanzaDiaConsolida4_Result>("[Entities].[FFinanzaDiaConsolida4](@ban, @gru, @cue, @rif, @lot, @dia, @des, @has, @ord)", banParameter, gruParameter, cueParameter, rifParameter, lotParameter, diaParameter, desParameter, hasParameter, ordParameter);
        }
    
        [DbFunction("Entities", "FFinanzaDiaConsolida5")]
        public virtual IQueryable<FFinanzaDiaConsolida5_Result> FFinanzaDiaConsolida5(string ban, string gru, Nullable<int> cue, Nullable<int> rif, Nullable<int> lot, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has, string ord)
        {
            var banParameter = ban != null ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(string));
    
            var gruParameter = gru != null ?
                new ObjectParameter("gru", gru) :
                new ObjectParameter("gru", typeof(string));
    
            var cueParameter = cue.HasValue ?
                new ObjectParameter("cue", cue) :
                new ObjectParameter("cue", typeof(int));
    
            var rifParameter = rif.HasValue ?
                new ObjectParameter("rif", rif) :
                new ObjectParameter("rif", typeof(int));
    
            var lotParameter = lot.HasValue ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            var ordParameter = ord != null ?
                new ObjectParameter("ord", ord) :
                new ObjectParameter("ord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FFinanzaDiaConsolida5_Result>("[Entities].[FFinanzaDiaConsolida5](@ban, @gru, @cue, @rif, @lot, @dia, @des, @has, @ord)", banParameter, gruParameter, cueParameter, rifParameter, lotParameter, diaParameter, desParameter, hasParameter, ordParameter);
        }
    
        [DbFunction("Entities", "FFinanzaHisConsolida")]
        public virtual IQueryable<FFinanzaHisConsolida_Result> FFinanzaHisConsolida(string ban, string gru, Nullable<int> cue, Nullable<int> rif, Nullable<int> lot, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has, string ord)
        {
            var banParameter = ban != null ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(string));
    
            var gruParameter = gru != null ?
                new ObjectParameter("gru", gru) :
                new ObjectParameter("gru", typeof(string));
    
            var cueParameter = cue.HasValue ?
                new ObjectParameter("cue", cue) :
                new ObjectParameter("cue", typeof(int));
    
            var rifParameter = rif.HasValue ?
                new ObjectParameter("rif", rif) :
                new ObjectParameter("rif", typeof(int));
    
            var lotParameter = lot.HasValue ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            var ordParameter = ord != null ?
                new ObjectParameter("ord", ord) :
                new ObjectParameter("ord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FFinanzaHisConsolida_Result>("[Entities].[FFinanzaHisConsolida](@ban, @gru, @cue, @rif, @lot, @dia, @des, @has, @ord)", banParameter, gruParameter, cueParameter, rifParameter, lotParameter, diaParameter, desParameter, hasParameter, ordParameter);
        }
    
        [DbFunction("Entities", "FFinanzaHisConsolida2")]
        public virtual IQueryable<FFinanzaHisConsolida2_Result> FFinanzaHisConsolida2(string ban, string gru, Nullable<int> cue, Nullable<int> rif, Nullable<int> lot, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has, string ord)
        {
            var banParameter = ban != null ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(string));
    
            var gruParameter = gru != null ?
                new ObjectParameter("gru", gru) :
                new ObjectParameter("gru", typeof(string));
    
            var cueParameter = cue.HasValue ?
                new ObjectParameter("cue", cue) :
                new ObjectParameter("cue", typeof(int));
    
            var rifParameter = rif.HasValue ?
                new ObjectParameter("rif", rif) :
                new ObjectParameter("rif", typeof(int));
    
            var lotParameter = lot.HasValue ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            var ordParameter = ord != null ?
                new ObjectParameter("ord", ord) :
                new ObjectParameter("ord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FFinanzaHisConsolida2_Result>("[Entities].[FFinanzaHisConsolida2](@ban, @gru, @cue, @rif, @lot, @dia, @des, @has, @ord)", banParameter, gruParameter, cueParameter, rifParameter, lotParameter, diaParameter, desParameter, hasParameter, ordParameter);
        }
    
        [DbFunction("Entities", "FFinanzaHisConsolida3")]
        public virtual IQueryable<FFinanzaHisConsolida3_Result> FFinanzaHisConsolida3(string ban, string gru, Nullable<int> cue, Nullable<int> rif, Nullable<int> lot, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has, string ord)
        {
            var banParameter = ban != null ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(string));
    
            var gruParameter = gru != null ?
                new ObjectParameter("gru", gru) :
                new ObjectParameter("gru", typeof(string));
    
            var cueParameter = cue.HasValue ?
                new ObjectParameter("cue", cue) :
                new ObjectParameter("cue", typeof(int));
    
            var rifParameter = rif.HasValue ?
                new ObjectParameter("rif", rif) :
                new ObjectParameter("rif", typeof(int));
    
            var lotParameter = lot.HasValue ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            var ordParameter = ord != null ?
                new ObjectParameter("ord", ord) :
                new ObjectParameter("ord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FFinanzaHisConsolida3_Result>("[Entities].[FFinanzaHisConsolida3](@ban, @gru, @cue, @rif, @lot, @dia, @des, @has, @ord)", banParameter, gruParameter, cueParameter, rifParameter, lotParameter, diaParameter, desParameter, hasParameter, ordParameter);
        }
    
        [DbFunction("Entities", "FFinanzaHisConsolida4")]
        public virtual IQueryable<FFinanzaHisConsolida4_Result> FFinanzaHisConsolida4(string ban, string gru, Nullable<int> cue, Nullable<int> rif, Nullable<int> lot, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has, string ord)
        {
            var banParameter = ban != null ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(string));
    
            var gruParameter = gru != null ?
                new ObjectParameter("gru", gru) :
                new ObjectParameter("gru", typeof(string));
    
            var cueParameter = cue.HasValue ?
                new ObjectParameter("cue", cue) :
                new ObjectParameter("cue", typeof(int));
    
            var rifParameter = rif.HasValue ?
                new ObjectParameter("rif", rif) :
                new ObjectParameter("rif", typeof(int));
    
            var lotParameter = lot.HasValue ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            var ordParameter = ord != null ?
                new ObjectParameter("ord", ord) :
                new ObjectParameter("ord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FFinanzaHisConsolida4_Result>("[Entities].[FFinanzaHisConsolida4](@ban, @gru, @cue, @rif, @lot, @dia, @des, @has, @ord)", banParameter, gruParameter, cueParameter, rifParameter, lotParameter, diaParameter, desParameter, hasParameter, ordParameter);
        }
    
        [DbFunction("Entities", "FFinanzaHisConsolida5")]
        public virtual IQueryable<FFinanzaHisConsolida5_Result> FFinanzaHisConsolida5(string ban, string gru, Nullable<int> cue, Nullable<int> rif, Nullable<int> lot, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has, string ord)
        {
            var banParameter = ban != null ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(string));
    
            var gruParameter = gru != null ?
                new ObjectParameter("gru", gru) :
                new ObjectParameter("gru", typeof(string));
    
            var cueParameter = cue.HasValue ?
                new ObjectParameter("cue", cue) :
                new ObjectParameter("cue", typeof(int));
    
            var rifParameter = rif.HasValue ?
                new ObjectParameter("rif", rif) :
                new ObjectParameter("rif", typeof(int));
    
            var lotParameter = lot.HasValue ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            var ordParameter = ord != null ?
                new ObjectParameter("ord", ord) :
                new ObjectParameter("ord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FFinanzaHisConsolida5_Result>("[Entities].[FFinanzaHisConsolida5](@ban, @gru, @cue, @rif, @lot, @dia, @des, @has, @ord)", banParameter, gruParameter, cueParameter, rifParameter, lotParameter, diaParameter, desParameter, hasParameter, ordParameter);
        }
    
        [DbFunction("Entities", "FFinanzaRifero")]
        public virtual IQueryable<FFinanzaRifero_Result> FFinanzaRifero(string ban, string gru, Nullable<int> cue, Nullable<int> rif, Nullable<int> lot, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has, string ord)
        {
            var banParameter = ban != null ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(string));
    
            var gruParameter = gru != null ?
                new ObjectParameter("gru", gru) :
                new ObjectParameter("gru", typeof(string));
    
            var cueParameter = cue.HasValue ?
                new ObjectParameter("cue", cue) :
                new ObjectParameter("cue", typeof(int));
    
            var rifParameter = rif.HasValue ?
                new ObjectParameter("rif", rif) :
                new ObjectParameter("rif", typeof(int));
    
            var lotParameter = lot.HasValue ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            var ordParameter = ord != null ?
                new ObjectParameter("ord", ord) :
                new ObjectParameter("ord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FFinanzaRifero_Result>("[Entities].[FFinanzaRifero](@ban, @gru, @cue, @rif, @lot, @dia, @des, @has, @ord)", banParameter, gruParameter, cueParameter, rifParameter, lotParameter, diaParameter, desParameter, hasParameter, ordParameter);
        }
    
        [DbFunction("Entities", "FFinanzaRiferoDia")]
        public virtual IQueryable<FFinanzaRiferoDia_Result> FFinanzaRiferoDia(string ban, string gru, Nullable<int> cue, Nullable<int> rif, Nullable<int> lot, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has, string ord)
        {
            var banParameter = ban != null ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(string));
    
            var gruParameter = gru != null ?
                new ObjectParameter("gru", gru) :
                new ObjectParameter("gru", typeof(string));
    
            var cueParameter = cue.HasValue ?
                new ObjectParameter("cue", cue) :
                new ObjectParameter("cue", typeof(int));
    
            var rifParameter = rif.HasValue ?
                new ObjectParameter("rif", rif) :
                new ObjectParameter("rif", typeof(int));
    
            var lotParameter = lot.HasValue ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            var ordParameter = ord != null ?
                new ObjectParameter("ord", ord) :
                new ObjectParameter("ord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FFinanzaRiferoDia_Result>("[Entities].[FFinanzaRiferoDia](@ban, @gru, @cue, @rif, @lot, @dia, @des, @has, @ord)", banParameter, gruParameter, cueParameter, rifParameter, lotParameter, diaParameter, desParameter, hasParameter, ordParameter);
        }
    
        [DbFunction("Entities", "FFinanzaRiferoFecha")]
        public virtual IQueryable<FFinanzaRiferoFecha_Result> FFinanzaRiferoFecha(string ban, string gru, Nullable<int> cue, Nullable<int> rif, Nullable<int> lot, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has, string ord)
        {
            var banParameter = ban != null ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(string));
    
            var gruParameter = gru != null ?
                new ObjectParameter("gru", gru) :
                new ObjectParameter("gru", typeof(string));
    
            var cueParameter = cue.HasValue ?
                new ObjectParameter("cue", cue) :
                new ObjectParameter("cue", typeof(int));
    
            var rifParameter = rif.HasValue ?
                new ObjectParameter("rif", rif) :
                new ObjectParameter("rif", typeof(int));
    
            var lotParameter = lot.HasValue ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            var ordParameter = ord != null ?
                new ObjectParameter("ord", ord) :
                new ObjectParameter("ord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FFinanzaRiferoFecha_Result>("[Entities].[FFinanzaRiferoFecha](@ban, @gru, @cue, @rif, @lot, @dia, @des, @has, @ord)", banParameter, gruParameter, cueParameter, rifParameter, lotParameter, diaParameter, desParameter, hasParameter, ordParameter);
        }
    
        [DbFunction("Entities", "FFinanzaRiferoHis")]
        public virtual IQueryable<FFinanzaRiferoHis_Result> FFinanzaRiferoHis(string ban, string gru, Nullable<int> cue, Nullable<int> rif, Nullable<int> lot, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has, string ord)
        {
            var banParameter = ban != null ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(string));
    
            var gruParameter = gru != null ?
                new ObjectParameter("gru", gru) :
                new ObjectParameter("gru", typeof(string));
    
            var cueParameter = cue.HasValue ?
                new ObjectParameter("cue", cue) :
                new ObjectParameter("cue", typeof(int));
    
            var rifParameter = rif.HasValue ?
                new ObjectParameter("rif", rif) :
                new ObjectParameter("rif", typeof(int));
    
            var lotParameter = lot.HasValue ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            var ordParameter = ord != null ?
                new ObjectParameter("ord", ord) :
                new ObjectParameter("ord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FFinanzaRiferoHis_Result>("[Entities].[FFinanzaRiferoHis](@ban, @gru, @cue, @rif, @lot, @dia, @des, @has, @ord)", banParameter, gruParameter, cueParameter, rifParameter, lotParameter, diaParameter, desParameter, hasParameter, ordParameter);
        }
    
        [DbFunction("Entities", "FFinanzasPagado")]
        public virtual IQueryable<FFinanzasPagado_Result> FFinanzasPagado(string ban, string gru, Nullable<int> cue, Nullable<int> rif, Nullable<int> lot, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has, string ord)
        {
            var banParameter = ban != null ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(string));
    
            var gruParameter = gru != null ?
                new ObjectParameter("gru", gru) :
                new ObjectParameter("gru", typeof(string));
    
            var cueParameter = cue.HasValue ?
                new ObjectParameter("cue", cue) :
                new ObjectParameter("cue", typeof(int));
    
            var rifParameter = rif.HasValue ?
                new ObjectParameter("rif", rif) :
                new ObjectParameter("rif", typeof(int));
    
            var lotParameter = lot.HasValue ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            var ordParameter = ord != null ?
                new ObjectParameter("ord", ord) :
                new ObjectParameter("ord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FFinanzasPagado_Result>("[Entities].[FFinanzasPagado](@ban, @gru, @cue, @rif, @lot, @dia, @des, @has, @ord)", banParameter, gruParameter, cueParameter, rifParameter, lotParameter, diaParameter, desParameter, hasParameter, ordParameter);
        }
    
        [DbFunction("Entities", "FHisConsolida2")]
        public virtual IQueryable<FHisConsolida2_Result> FHisConsolida2(string ban, string gru, Nullable<int> cue, Nullable<int> rif, Nullable<int> lot, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has, string ord)
        {
            var banParameter = ban != null ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(string));
    
            var gruParameter = gru != null ?
                new ObjectParameter("gru", gru) :
                new ObjectParameter("gru", typeof(string));
    
            var cueParameter = cue.HasValue ?
                new ObjectParameter("cue", cue) :
                new ObjectParameter("cue", typeof(int));
    
            var rifParameter = rif.HasValue ?
                new ObjectParameter("rif", rif) :
                new ObjectParameter("rif", typeof(int));
    
            var lotParameter = lot.HasValue ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            var ordParameter = ord != null ?
                new ObjectParameter("ord", ord) :
                new ObjectParameter("ord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FHisConsolida2_Result>("[Entities].[FHisConsolida2](@ban, @gru, @cue, @rif, @lot, @dia, @des, @has, @ord)", banParameter, gruParameter, cueParameter, rifParameter, lotParameter, diaParameter, desParameter, hasParameter, ordParameter);
        }
    
        [DbFunction("Entities", "FHisConsolida3")]
        public virtual IQueryable<FHisConsolida3_Result> FHisConsolida3(string ban, string gru, Nullable<int> cue, Nullable<int> rif, Nullable<int> lot, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has, string ord)
        {
            var banParameter = ban != null ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(string));
    
            var gruParameter = gru != null ?
                new ObjectParameter("gru", gru) :
                new ObjectParameter("gru", typeof(string));
    
            var cueParameter = cue.HasValue ?
                new ObjectParameter("cue", cue) :
                new ObjectParameter("cue", typeof(int));
    
            var rifParameter = rif.HasValue ?
                new ObjectParameter("rif", rif) :
                new ObjectParameter("rif", typeof(int));
    
            var lotParameter = lot.HasValue ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            var ordParameter = ord != null ?
                new ObjectParameter("ord", ord) :
                new ObjectParameter("ord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FHisConsolida3_Result>("[Entities].[FHisConsolida3](@ban, @gru, @cue, @rif, @lot, @dia, @des, @has, @ord)", banParameter, gruParameter, cueParameter, rifParameter, lotParameter, diaParameter, desParameter, hasParameter, ordParameter);
        }
    
        [DbFunction("Entities", "FHisConsolida4")]
        public virtual IQueryable<FHisConsolida4_Result> FHisConsolida4(string ban, string gru, Nullable<int> cue, Nullable<int> rif, Nullable<int> lot, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has, string ord)
        {
            var banParameter = ban != null ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(string));
    
            var gruParameter = gru != null ?
                new ObjectParameter("gru", gru) :
                new ObjectParameter("gru", typeof(string));
    
            var cueParameter = cue.HasValue ?
                new ObjectParameter("cue", cue) :
                new ObjectParameter("cue", typeof(int));
    
            var rifParameter = rif.HasValue ?
                new ObjectParameter("rif", rif) :
                new ObjectParameter("rif", typeof(int));
    
            var lotParameter = lot.HasValue ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            var ordParameter = ord != null ?
                new ObjectParameter("ord", ord) :
                new ObjectParameter("ord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FHisConsolida4_Result>("[Entities].[FHisConsolida4](@ban, @gru, @cue, @rif, @lot, @dia, @des, @has, @ord)", banParameter, gruParameter, cueParameter, rifParameter, lotParameter, diaParameter, desParameter, hasParameter, ordParameter);
        }
    
        [DbFunction("Entities", "FHisConsolida5")]
        public virtual IQueryable<FHisConsolida5_Result> FHisConsolida5(string ban, string gru, Nullable<int> cue, Nullable<int> rif, Nullable<int> lot, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has, string ord)
        {
            var banParameter = ban != null ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(string));
    
            var gruParameter = gru != null ?
                new ObjectParameter("gru", gru) :
                new ObjectParameter("gru", typeof(string));
    
            var cueParameter = cue.HasValue ?
                new ObjectParameter("cue", cue) :
                new ObjectParameter("cue", typeof(int));
    
            var rifParameter = rif.HasValue ?
                new ObjectParameter("rif", rif) :
                new ObjectParameter("rif", typeof(int));
    
            var lotParameter = lot.HasValue ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            var ordParameter = ord != null ?
                new ObjectParameter("ord", ord) :
                new ObjectParameter("ord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FHisConsolida5_Result>("[Entities].[FHisConsolida5](@ban, @gru, @cue, @rif, @lot, @dia, @des, @has, @ord)", banParameter, gruParameter, cueParameter, rifParameter, lotParameter, diaParameter, desParameter, hasParameter, ordParameter);
        }
    
        [DbFunction("Entities", "FMarCont")]
        public virtual IQueryable<FMarCont_Result> FMarCont(Nullable<System.DateTime> fecha)
        {
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FMarCont_Result>("[Entities].[FMarCont](@Fecha)", fechaParameter);
        }
    
        [DbFunction("Entities", "FResumenGrafico")]
        public virtual IQueryable<FResumenGrafico_Result> FResumenGrafico(string ban, string gru, Nullable<int> cue, Nullable<int> rif, Nullable<int> lot, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has, string ord, Nullable<int> grouping)
        {
            var banParameter = ban != null ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(string));
    
            var gruParameter = gru != null ?
                new ObjectParameter("gru", gru) :
                new ObjectParameter("gru", typeof(string));
    
            var cueParameter = cue.HasValue ?
                new ObjectParameter("cue", cue) :
                new ObjectParameter("cue", typeof(int));
    
            var rifParameter = rif.HasValue ?
                new ObjectParameter("rif", rif) :
                new ObjectParameter("rif", typeof(int));
    
            var lotParameter = lot.HasValue ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            var ordParameter = ord != null ?
                new ObjectParameter("ord", ord) :
                new ObjectParameter("ord", typeof(string));
    
            var groupingParameter = grouping.HasValue ?
                new ObjectParameter("grouping", grouping) :
                new ObjectParameter("grouping", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FResumenGrafico_Result>("[Entities].[FResumenGrafico](@ban, @gru, @cue, @rif, @lot, @dia, @des, @has, @ord, @grouping)", banParameter, gruParameter, cueParameter, rifParameter, lotParameter, diaParameter, desParameter, hasParameter, ordParameter, groupingParameter);
        }
    
        [DbFunction("Entities", "FSplit")]
        public virtual IQueryable<FSplit_Result> FSplit(string @string, string delimiter)
        {
            var stringParameter = @string != null ?
                new ObjectParameter("String", @string) :
                new ObjectParameter("String", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FSplit_Result>("[Entities].[FSplit](@String, @Delimiter)", stringParameter, delimiterParameter);
        }
    
        [DbFunction("Entities", "FTicketsDia")]
        public virtual IQueryable<FTicketsDia_Result> FTicketsDia(string ban, string gru, Nullable<int> cue, Nullable<int> rif, Nullable<int> lot, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has, string ord)
        {
            var banParameter = ban != null ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(string));
    
            var gruParameter = gru != null ?
                new ObjectParameter("gru", gru) :
                new ObjectParameter("gru", typeof(string));
    
            var cueParameter = cue.HasValue ?
                new ObjectParameter("cue", cue) :
                new ObjectParameter("cue", typeof(int));
    
            var rifParameter = rif.HasValue ?
                new ObjectParameter("rif", rif) :
                new ObjectParameter("rif", typeof(int));
    
            var lotParameter = lot.HasValue ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            var ordParameter = ord != null ?
                new ObjectParameter("ord", ord) :
                new ObjectParameter("ord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FTicketsDia_Result>("[Entities].[FTicketsDia](@ban, @gru, @cue, @rif, @lot, @dia, @des, @has, @ord)", banParameter, gruParameter, cueParameter, rifParameter, lotParameter, diaParameter, desParameter, hasParameter, ordParameter);
        }
    
        [DbFunction("Entities", "FTicketsDiaGanadores")]
        public virtual IQueryable<FTicketsDiaGanadores_Result> FTicketsDiaGanadores(string ban, string gru, Nullable<int> cue, Nullable<int> rif, Nullable<int> lot, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has, string ord)
        {
            var banParameter = ban != null ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(string));
    
            var gruParameter = gru != null ?
                new ObjectParameter("gru", gru) :
                new ObjectParameter("gru", typeof(string));
    
            var cueParameter = cue.HasValue ?
                new ObjectParameter("cue", cue) :
                new ObjectParameter("cue", typeof(int));
    
            var rifParameter = rif.HasValue ?
                new ObjectParameter("rif", rif) :
                new ObjectParameter("rif", typeof(int));
    
            var lotParameter = lot.HasValue ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            var ordParameter = ord != null ?
                new ObjectParameter("ord", ord) :
                new ObjectParameter("ord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FTicketsDiaGanadores_Result>("[Entities].[FTicketsDiaGanadores](@ban, @gru, @cue, @rif, @lot, @dia, @des, @has, @ord)", banParameter, gruParameter, cueParameter, rifParameter, lotParameter, diaParameter, desParameter, hasParameter, ordParameter);
        }
    
        [DbFunction("Entities", "FTicketsGanadores")]
        public virtual IQueryable<FTicketsGanadores_Result> FTicketsGanadores(string ban, string gru, Nullable<int> cue, Nullable<int> rif, Nullable<int> lot, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has, string ord)
        {
            var banParameter = ban != null ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(string));
    
            var gruParameter = gru != null ?
                new ObjectParameter("gru", gru) :
                new ObjectParameter("gru", typeof(string));
    
            var cueParameter = cue.HasValue ?
                new ObjectParameter("cue", cue) :
                new ObjectParameter("cue", typeof(int));
    
            var rifParameter = rif.HasValue ?
                new ObjectParameter("rif", rif) :
                new ObjectParameter("rif", typeof(int));
    
            var lotParameter = lot.HasValue ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            var ordParameter = ord != null ?
                new ObjectParameter("ord", ord) :
                new ObjectParameter("ord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FTicketsGanadores_Result>("[Entities].[FTicketsGanadores](@ban, @gru, @cue, @rif, @lot, @dia, @des, @has, @ord)", banParameter, gruParameter, cueParameter, rifParameter, lotParameter, diaParameter, desParameter, hasParameter, ordParameter);
        }
    
        [DbFunction("Entities", "FTicketsHis")]
        public virtual IQueryable<FTicketsHis_Result> FTicketsHis(string ban, string gru, Nullable<int> cue, Nullable<int> rif, Nullable<int> lot, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has, string ord)
        {
            var banParameter = ban != null ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(string));
    
            var gruParameter = gru != null ?
                new ObjectParameter("gru", gru) :
                new ObjectParameter("gru", typeof(string));
    
            var cueParameter = cue.HasValue ?
                new ObjectParameter("cue", cue) :
                new ObjectParameter("cue", typeof(int));
    
            var rifParameter = rif.HasValue ?
                new ObjectParameter("rif", rif) :
                new ObjectParameter("rif", typeof(int));
    
            var lotParameter = lot.HasValue ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            var ordParameter = ord != null ?
                new ObjectParameter("ord", ord) :
                new ObjectParameter("ord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FTicketsHis_Result>("[Entities].[FTicketsHis](@ban, @gru, @cue, @rif, @lot, @dia, @des, @has, @ord)", banParameter, gruParameter, cueParameter, rifParameter, lotParameter, diaParameter, desParameter, hasParameter, ordParameter);
        }
    
        [DbFunction("Entities", "FTicketsHisGanadores")]
        public virtual IQueryable<FTicketsHisGanadores_Result> FTicketsHisGanadores(string ban, string gru, Nullable<int> cue, Nullable<int> rif, Nullable<int> lot, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has, string ord)
        {
            var banParameter = ban != null ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(string));
    
            var gruParameter = gru != null ?
                new ObjectParameter("gru", gru) :
                new ObjectParameter("gru", typeof(string));
    
            var cueParameter = cue.HasValue ?
                new ObjectParameter("cue", cue) :
                new ObjectParameter("cue", typeof(int));
    
            var rifParameter = rif.HasValue ?
                new ObjectParameter("rif", rif) :
                new ObjectParameter("rif", typeof(int));
    
            var lotParameter = lot.HasValue ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            var ordParameter = ord != null ?
                new ObjectParameter("ord", ord) :
                new ObjectParameter("ord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FTicketsHisGanadores_Result>("[Entities].[FTicketsHisGanadores](@ban, @gru, @cue, @rif, @lot, @dia, @des, @has, @ord)", banParameter, gruParameter, cueParameter, rifParameter, lotParameter, diaParameter, desParameter, hasParameter, ordParameter);
        }
    
        [DbFunction("Entities", "FTicketsImpuestos")]
        public virtual IQueryable<FTicketsImpuestos_Result> FTicketsImpuestos(string ban, string gru, Nullable<int> cue, Nullable<int> rif, Nullable<int> lot, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has, string ord)
        {
            var banParameter = ban != null ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(string));
    
            var gruParameter = gru != null ?
                new ObjectParameter("gru", gru) :
                new ObjectParameter("gru", typeof(string));
    
            var cueParameter = cue.HasValue ?
                new ObjectParameter("cue", cue) :
                new ObjectParameter("cue", typeof(int));
    
            var rifParameter = rif.HasValue ?
                new ObjectParameter("rif", rif) :
                new ObjectParameter("rif", typeof(int));
    
            var lotParameter = lot.HasValue ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            var ordParameter = ord != null ?
                new ObjectParameter("ord", ord) :
                new ObjectParameter("ord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FTicketsImpuestos_Result>("[Entities].[FTicketsImpuestos](@ban, @gru, @cue, @rif, @lot, @dia, @des, @has, @ord)", banParameter, gruParameter, cueParameter, rifParameter, lotParameter, diaParameter, desParameter, hasParameter, ordParameter);
        }
    
        [DbFunction("Entities", "FTicketsNoPagados")]
        public virtual IQueryable<FTicketsNoPagados_Result> FTicketsNoPagados(string ban, string gru, Nullable<int> cue, Nullable<int> rif, Nullable<int> lot, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has, string ord)
        {
            var banParameter = ban != null ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(string));
    
            var gruParameter = gru != null ?
                new ObjectParameter("gru", gru) :
                new ObjectParameter("gru", typeof(string));
    
            var cueParameter = cue.HasValue ?
                new ObjectParameter("cue", cue) :
                new ObjectParameter("cue", typeof(int));
    
            var rifParameter = rif.HasValue ?
                new ObjectParameter("rif", rif) :
                new ObjectParameter("rif", typeof(int));
    
            var lotParameter = lot.HasValue ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            var ordParameter = ord != null ?
                new ObjectParameter("ord", ord) :
                new ObjectParameter("ord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FTicketsNoPagados_Result>("[Entities].[FTicketsNoPagados](@ban, @gru, @cue, @rif, @lot, @dia, @des, @has, @ord)", banParameter, gruParameter, cueParameter, rifParameter, lotParameter, diaParameter, desParameter, hasParameter, ordParameter);
        }
    
        [DbFunction("Entities", "FTicketsNulos")]
        public virtual IQueryable<FTicketsNulos_Result> FTicketsNulos(string ban, string gru, Nullable<int> cue, Nullable<int> rif, Nullable<int> lot, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has, string ord)
        {
            var banParameter = ban != null ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(string));
    
            var gruParameter = gru != null ?
                new ObjectParameter("gru", gru) :
                new ObjectParameter("gru", typeof(string));
    
            var cueParameter = cue.HasValue ?
                new ObjectParameter("cue", cue) :
                new ObjectParameter("cue", typeof(int));
    
            var rifParameter = rif.HasValue ?
                new ObjectParameter("rif", rif) :
                new ObjectParameter("rif", typeof(int));
    
            var lotParameter = lot.HasValue ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            var ordParameter = ord != null ?
                new ObjectParameter("ord", ord) :
                new ObjectParameter("ord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FTicketsNulos_Result>("[Entities].[FTicketsNulos](@ban, @gru, @cue, @rif, @lot, @dia, @des, @has, @ord)", banParameter, gruParameter, cueParameter, rifParameter, lotParameter, diaParameter, desParameter, hasParameter, ordParameter);
        }
    
        [DbFunction("Entities", "FTicketsPagados")]
        public virtual IQueryable<FTicketsPagados_Result> FTicketsPagados(string ban, string gru, Nullable<int> cue, Nullable<int> rif, Nullable<int> lot, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has, string ord)
        {
            var banParameter = ban != null ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(string));
    
            var gruParameter = gru != null ?
                new ObjectParameter("gru", gru) :
                new ObjectParameter("gru", typeof(string));
    
            var cueParameter = cue.HasValue ?
                new ObjectParameter("cue", cue) :
                new ObjectParameter("cue", typeof(int));
    
            var rifParameter = rif.HasValue ?
                new ObjectParameter("rif", rif) :
                new ObjectParameter("rif", typeof(int));
    
            var lotParameter = lot.HasValue ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            var ordParameter = ord != null ?
                new ObjectParameter("ord", ord) :
                new ObjectParameter("ord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FTicketsPagados_Result>("[Entities].[FTicketsPagados](@ban, @gru, @cue, @rif, @lot, @dia, @des, @has, @ord)", banParameter, gruParameter, cueParameter, rifParameter, lotParameter, diaParameter, desParameter, hasParameter, ordParameter);
        }
    
        [DbFunction("Entities", "FTicketsPagoRemoto")]
        public virtual IQueryable<FTicketsPagoRemoto_Result> FTicketsPagoRemoto(string ban, string gru, Nullable<int> cue, Nullable<int> rif, Nullable<int> lot, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has, string ord)
        {
            var banParameter = ban != null ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(string));
    
            var gruParameter = gru != null ?
                new ObjectParameter("gru", gru) :
                new ObjectParameter("gru", typeof(string));
    
            var cueParameter = cue.HasValue ?
                new ObjectParameter("cue", cue) :
                new ObjectParameter("cue", typeof(int));
    
            var rifParameter = rif.HasValue ?
                new ObjectParameter("rif", rif) :
                new ObjectParameter("rif", typeof(int));
    
            var lotParameter = lot.HasValue ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            var ordParameter = ord != null ?
                new ObjectParameter("ord", ord) :
                new ObjectParameter("ord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FTicketsPagoRemoto_Result>("[Entities].[FTicketsPagoRemoto](@ban, @gru, @cue, @rif, @lot, @dia, @des, @has, @ord)", banParameter, gruParameter, cueParameter, rifParameter, lotParameter, diaParameter, desParameter, hasParameter, ordParameter);
        }
    
        [DbFunction("Entities", "FTicketsPagoRemotoBanca")]
        public virtual IQueryable<FTicketsPagoRemotoBanca_Result> FTicketsPagoRemotoBanca(Nullable<int> ban, Nullable<System.DateTime> dia)
        {
            var banParameter = ban.HasValue ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FTicketsPagoRemotoBanca_Result>("[Entities].[FTicketsPagoRemotoBanca](@ban, @dia)", banParameter, diaParameter);
        }
    
        [DbFunction("Entities", "FTicketsValidos")]
        public virtual IQueryable<FTicketsValidos_Result> FTicketsValidos(string ban, string gru, Nullable<int> cue, Nullable<int> rif, Nullable<int> lot, Nullable<System.DateTime> dia, Nullable<System.DateTime> des, Nullable<System.DateTime> has, string ord)
        {
            var banParameter = ban != null ?
                new ObjectParameter("ban", ban) :
                new ObjectParameter("ban", typeof(string));
    
            var gruParameter = gru != null ?
                new ObjectParameter("gru", gru) :
                new ObjectParameter("gru", typeof(string));
    
            var cueParameter = cue.HasValue ?
                new ObjectParameter("cue", cue) :
                new ObjectParameter("cue", typeof(int));
    
            var rifParameter = rif.HasValue ?
                new ObjectParameter("rif", rif) :
                new ObjectParameter("rif", typeof(int));
    
            var lotParameter = lot.HasValue ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            var ordParameter = ord != null ?
                new ObjectParameter("ord", ord) :
                new ObjectParameter("ord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FTicketsValidos_Result>("[Entities].[FTicketsValidos](@ban, @gru, @cue, @rif, @lot, @dia, @des, @has, @ord)", banParameter, gruParameter, cueParameter, rifParameter, lotParameter, diaParameter, desParameter, hasParameter, ordParameter);
        }
    
        public virtual int ActualizaListaDia(Nullable<int> ticket, string ticNum)
        {
            var ticketParameter = ticket.HasValue ?
                new ObjectParameter("Ticket", ticket) :
                new ObjectParameter("Ticket", typeof(int));
    
            var ticNumParameter = ticNum != null ?
                new ObjectParameter("TicNum", ticNum) :
                new ObjectParameter("TicNum", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ActualizaListaDia", ticketParameter, ticNumParameter);
        }
    
        public virtual int ActualizaMontoPagado(Nullable<int> diaID, Nullable<int> bancaID)
        {
            var diaIDParameter = diaID.HasValue ?
                new ObjectParameter("DiaID", diaID) :
                new ObjectParameter("DiaID", typeof(int));
    
            var bancaIDParameter = bancaID.HasValue ?
                new ObjectParameter("BancaID", bancaID) :
                new ObjectParameter("BancaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ActualizaMontoPagado", diaIDParameter, bancaIDParameter);
        }
    
        public virtual int Busca_Premios_En_DATA110()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Busca_Premios_En_DATA110");
        }
    
        public virtual int CalcRiesgo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CalcRiesgo");
        }
    
        public virtual int CorrigePremiosOficial(Nullable<int> loteria, string primero, string segundo, string tercero, Nullable<System.DateTime> fecha)
        {
            var loteriaParameter = loteria.HasValue ?
                new ObjectParameter("Loteria", loteria) :
                new ObjectParameter("Loteria", typeof(int));
    
            var primeroParameter = primero != null ?
                new ObjectParameter("Primero", primero) :
                new ObjectParameter("Primero", typeof(string));
    
            var segundoParameter = segundo != null ?
                new ObjectParameter("Segundo", segundo) :
                new ObjectParameter("Segundo", typeof(string));
    
            var terceroParameter = tercero != null ?
                new ObjectParameter("Tercero", tercero) :
                new ObjectParameter("Tercero", typeof(string));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CorrigePremiosOficial", loteriaParameter, primeroParameter, segundoParameter, terceroParameter, fechaParameter);
        }
    
        public virtual int CrearLoteriaPrecio(Nullable<int> tarea, string nombre)
        {
            var tareaParameter = tarea.HasValue ?
                new ObjectParameter("Tarea", tarea) :
                new ObjectParameter("Tarea", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CrearLoteriaPrecio", tareaParameter, nombreParameter);
        }
    
        public virtual int CrearLoteriaPrecio2(Nullable<int> tarea, string nombre, string nombreResumido)
        {
            var tareaParameter = tarea.HasValue ?
                new ObjectParameter("Tarea", tarea) :
                new ObjectParameter("Tarea", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var nombreResumidoParameter = nombreResumido != null ?
                new ObjectParameter("NombreResumido", nombreResumido) :
                new ObjectParameter("NombreResumido", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CrearLoteriaPrecio2", tareaParameter, nombreParameter, nombreResumidoParameter);
        }
    
        public virtual int dt_addtosourcecontrol(string vchSourceSafeINI, string vchProjectName, string vchComment, string vchLoginName, string vchPassword)
        {
            var vchSourceSafeINIParameter = vchSourceSafeINI != null ?
                new ObjectParameter("vchSourceSafeINI", vchSourceSafeINI) :
                new ObjectParameter("vchSourceSafeINI", typeof(string));
    
            var vchProjectNameParameter = vchProjectName != null ?
                new ObjectParameter("vchProjectName", vchProjectName) :
                new ObjectParameter("vchProjectName", typeof(string));
    
            var vchCommentParameter = vchComment != null ?
                new ObjectParameter("vchComment", vchComment) :
                new ObjectParameter("vchComment", typeof(string));
    
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_addtosourcecontrol", vchSourceSafeINIParameter, vchProjectNameParameter, vchCommentParameter, vchLoginNameParameter, vchPasswordParameter);
        }
    
        public virtual int dt_addtosourcecontrol_u(string vchSourceSafeINI, string vchProjectName, string vchComment, string vchLoginName, string vchPassword)
        {
            var vchSourceSafeINIParameter = vchSourceSafeINI != null ?
                new ObjectParameter("vchSourceSafeINI", vchSourceSafeINI) :
                new ObjectParameter("vchSourceSafeINI", typeof(string));
    
            var vchProjectNameParameter = vchProjectName != null ?
                new ObjectParameter("vchProjectName", vchProjectName) :
                new ObjectParameter("vchProjectName", typeof(string));
    
            var vchCommentParameter = vchComment != null ?
                new ObjectParameter("vchComment", vchComment) :
                new ObjectParameter("vchComment", typeof(string));
    
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_addtosourcecontrol_u", vchSourceSafeINIParameter, vchProjectNameParameter, vchCommentParameter, vchLoginNameParameter, vchPasswordParameter);
        }
    
        public virtual int dt_adduserobject()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_adduserobject");
        }
    
        public virtual int dt_adduserobject_vcs(string vchProperty)
        {
            var vchPropertyParameter = vchProperty != null ?
                new ObjectParameter("vchProperty", vchProperty) :
                new ObjectParameter("vchProperty", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_adduserobject_vcs", vchPropertyParameter);
        }
    
        public virtual int dt_checkinobject(string chObjectType, string vchObjectName, string vchComment, string vchLoginName, string vchPassword, Nullable<int> iVCSFlags, Nullable<int> iActionFlag, string txStream1, string txStream2, string txStream3)
        {
            var chObjectTypeParameter = chObjectType != null ?
                new ObjectParameter("chObjectType", chObjectType) :
                new ObjectParameter("chObjectType", typeof(string));
    
            var vchObjectNameParameter = vchObjectName != null ?
                new ObjectParameter("vchObjectName", vchObjectName) :
                new ObjectParameter("vchObjectName", typeof(string));
    
            var vchCommentParameter = vchComment != null ?
                new ObjectParameter("vchComment", vchComment) :
                new ObjectParameter("vchComment", typeof(string));
    
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            var iVCSFlagsParameter = iVCSFlags.HasValue ?
                new ObjectParameter("iVCSFlags", iVCSFlags) :
                new ObjectParameter("iVCSFlags", typeof(int));
    
            var iActionFlagParameter = iActionFlag.HasValue ?
                new ObjectParameter("iActionFlag", iActionFlag) :
                new ObjectParameter("iActionFlag", typeof(int));
    
            var txStream1Parameter = txStream1 != null ?
                new ObjectParameter("txStream1", txStream1) :
                new ObjectParameter("txStream1", typeof(string));
    
            var txStream2Parameter = txStream2 != null ?
                new ObjectParameter("txStream2", txStream2) :
                new ObjectParameter("txStream2", typeof(string));
    
            var txStream3Parameter = txStream3 != null ?
                new ObjectParameter("txStream3", txStream3) :
                new ObjectParameter("txStream3", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_checkinobject", chObjectTypeParameter, vchObjectNameParameter, vchCommentParameter, vchLoginNameParameter, vchPasswordParameter, iVCSFlagsParameter, iActionFlagParameter, txStream1Parameter, txStream2Parameter, txStream3Parameter);
        }
    
        public virtual int dt_checkinobject_u(string chObjectType, string vchObjectName, string vchComment, string vchLoginName, string vchPassword, Nullable<int> iVCSFlags, Nullable<int> iActionFlag, string txStream1, string txStream2, string txStream3)
        {
            var chObjectTypeParameter = chObjectType != null ?
                new ObjectParameter("chObjectType", chObjectType) :
                new ObjectParameter("chObjectType", typeof(string));
    
            var vchObjectNameParameter = vchObjectName != null ?
                new ObjectParameter("vchObjectName", vchObjectName) :
                new ObjectParameter("vchObjectName", typeof(string));
    
            var vchCommentParameter = vchComment != null ?
                new ObjectParameter("vchComment", vchComment) :
                new ObjectParameter("vchComment", typeof(string));
    
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            var iVCSFlagsParameter = iVCSFlags.HasValue ?
                new ObjectParameter("iVCSFlags", iVCSFlags) :
                new ObjectParameter("iVCSFlags", typeof(int));
    
            var iActionFlagParameter = iActionFlag.HasValue ?
                new ObjectParameter("iActionFlag", iActionFlag) :
                new ObjectParameter("iActionFlag", typeof(int));
    
            var txStream1Parameter = txStream1 != null ?
                new ObjectParameter("txStream1", txStream1) :
                new ObjectParameter("txStream1", typeof(string));
    
            var txStream2Parameter = txStream2 != null ?
                new ObjectParameter("txStream2", txStream2) :
                new ObjectParameter("txStream2", typeof(string));
    
            var txStream3Parameter = txStream3 != null ?
                new ObjectParameter("txStream3", txStream3) :
                new ObjectParameter("txStream3", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_checkinobject_u", chObjectTypeParameter, vchObjectNameParameter, vchCommentParameter, vchLoginNameParameter, vchPasswordParameter, iVCSFlagsParameter, iActionFlagParameter, txStream1Parameter, txStream2Parameter, txStream3Parameter);
        }
    
        public virtual int dt_checkoutobject(string chObjectType, string vchObjectName, string vchComment, string vchLoginName, string vchPassword, Nullable<int> iVCSFlags, Nullable<int> iActionFlag)
        {
            var chObjectTypeParameter = chObjectType != null ?
                new ObjectParameter("chObjectType", chObjectType) :
                new ObjectParameter("chObjectType", typeof(string));
    
            var vchObjectNameParameter = vchObjectName != null ?
                new ObjectParameter("vchObjectName", vchObjectName) :
                new ObjectParameter("vchObjectName", typeof(string));
    
            var vchCommentParameter = vchComment != null ?
                new ObjectParameter("vchComment", vchComment) :
                new ObjectParameter("vchComment", typeof(string));
    
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            var iVCSFlagsParameter = iVCSFlags.HasValue ?
                new ObjectParameter("iVCSFlags", iVCSFlags) :
                new ObjectParameter("iVCSFlags", typeof(int));
    
            var iActionFlagParameter = iActionFlag.HasValue ?
                new ObjectParameter("iActionFlag", iActionFlag) :
                new ObjectParameter("iActionFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_checkoutobject", chObjectTypeParameter, vchObjectNameParameter, vchCommentParameter, vchLoginNameParameter, vchPasswordParameter, iVCSFlagsParameter, iActionFlagParameter);
        }
    
        public virtual int dt_checkoutobject_u(string chObjectType, string vchObjectName, string vchComment, string vchLoginName, string vchPassword, Nullable<int> iVCSFlags, Nullable<int> iActionFlag)
        {
            var chObjectTypeParameter = chObjectType != null ?
                new ObjectParameter("chObjectType", chObjectType) :
                new ObjectParameter("chObjectType", typeof(string));
    
            var vchObjectNameParameter = vchObjectName != null ?
                new ObjectParameter("vchObjectName", vchObjectName) :
                new ObjectParameter("vchObjectName", typeof(string));
    
            var vchCommentParameter = vchComment != null ?
                new ObjectParameter("vchComment", vchComment) :
                new ObjectParameter("vchComment", typeof(string));
    
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            var iVCSFlagsParameter = iVCSFlags.HasValue ?
                new ObjectParameter("iVCSFlags", iVCSFlags) :
                new ObjectParameter("iVCSFlags", typeof(int));
    
            var iActionFlagParameter = iActionFlag.HasValue ?
                new ObjectParameter("iActionFlag", iActionFlag) :
                new ObjectParameter("iActionFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_checkoutobject_u", chObjectTypeParameter, vchObjectNameParameter, vchCommentParameter, vchLoginNameParameter, vchPasswordParameter, iVCSFlagsParameter, iActionFlagParameter);
        }
    
        public virtual int dt_displayoaerror(Nullable<int> iObject, Nullable<int> iresult)
        {
            var iObjectParameter = iObject.HasValue ?
                new ObjectParameter("iObject", iObject) :
                new ObjectParameter("iObject", typeof(int));
    
            var iresultParameter = iresult.HasValue ?
                new ObjectParameter("iresult", iresult) :
                new ObjectParameter("iresult", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_displayoaerror", iObjectParameter, iresultParameter);
        }
    
        public virtual int dt_displayoaerror_u(Nullable<int> iObject, Nullable<int> iresult)
        {
            var iObjectParameter = iObject.HasValue ?
                new ObjectParameter("iObject", iObject) :
                new ObjectParameter("iObject", typeof(int));
    
            var iresultParameter = iresult.HasValue ?
                new ObjectParameter("iresult", iresult) :
                new ObjectParameter("iresult", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_displayoaerror_u", iObjectParameter, iresultParameter);
        }
    
        public virtual int dt_droppropertiesbyid(Nullable<int> id, string property)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_droppropertiesbyid", idParameter, propertyParameter);
        }
    
        public virtual int dt_dropuserobjectbyid(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_dropuserobjectbyid", idParameter);
        }
    
        public virtual int dt_generateansiname(ObjectParameter name)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_generateansiname", name);
        }
    
        public virtual ObjectResult<Nullable<int>> dt_getobjwithprop(string property, string value)
        {
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("dt_getobjwithprop", propertyParameter, valueParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> dt_getobjwithprop_u(string property, string uvalue)
        {
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            var uvalueParameter = uvalue != null ?
                new ObjectParameter("uvalue", uvalue) :
                new ObjectParameter("uvalue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("dt_getobjwithprop_u", propertyParameter, uvalueParameter);
        }
    
        public virtual ObjectResult<dt_getpropertiesbyid_Result> dt_getpropertiesbyid(Nullable<int> id, string property)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dt_getpropertiesbyid_Result>("dt_getpropertiesbyid", idParameter, propertyParameter);
        }
    
        public virtual ObjectResult<dt_getpropertiesbyid_u_Result> dt_getpropertiesbyid_u(Nullable<int> id, string property)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dt_getpropertiesbyid_u_Result>("dt_getpropertiesbyid_u", idParameter, propertyParameter);
        }
    
        public virtual int dt_getpropertiesbyid_vcs(Nullable<int> id, string property, ObjectParameter value)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_getpropertiesbyid_vcs", idParameter, propertyParameter, value);
        }
    
        public virtual int dt_getpropertiesbyid_vcs_u(Nullable<int> id, string property, ObjectParameter value)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_getpropertiesbyid_vcs_u", idParameter, propertyParameter, value);
        }
    
        public virtual int dt_isundersourcecontrol(string vchLoginName, string vchPassword, Nullable<int> iWhoToo)
        {
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            var iWhoTooParameter = iWhoToo.HasValue ?
                new ObjectParameter("iWhoToo", iWhoToo) :
                new ObjectParameter("iWhoToo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_isundersourcecontrol", vchLoginNameParameter, vchPasswordParameter, iWhoTooParameter);
        }
    
        public virtual int dt_isundersourcecontrol_u(string vchLoginName, string vchPassword, Nullable<int> iWhoToo)
        {
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            var iWhoTooParameter = iWhoToo.HasValue ?
                new ObjectParameter("iWhoToo", iWhoToo) :
                new ObjectParameter("iWhoToo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_isundersourcecontrol_u", vchLoginNameParameter, vchPasswordParameter, iWhoTooParameter);
        }
    
        public virtual int dt_removefromsourcecontrol()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_removefromsourcecontrol");
        }
    
        public virtual int dt_setpropertybyid(Nullable<int> id, string property, string value, byte[] lvalue)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(string));
    
            var lvalueParameter = lvalue != null ?
                new ObjectParameter("lvalue", lvalue) :
                new ObjectParameter("lvalue", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_setpropertybyid", idParameter, propertyParameter, valueParameter, lvalueParameter);
        }
    
        public virtual int dt_setpropertybyid_u(Nullable<int> id, string property, string uvalue, byte[] lvalue)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            var uvalueParameter = uvalue != null ?
                new ObjectParameter("uvalue", uvalue) :
                new ObjectParameter("uvalue", typeof(string));
    
            var lvalueParameter = lvalue != null ?
                new ObjectParameter("lvalue", lvalue) :
                new ObjectParameter("lvalue", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_setpropertybyid_u", idParameter, propertyParameter, uvalueParameter, lvalueParameter);
        }
    
        public virtual int dt_validateloginparams(string vchLoginName, string vchPassword)
        {
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_validateloginparams", vchLoginNameParameter, vchPasswordParameter);
        }
    
        public virtual int dt_validateloginparams_u(string vchLoginName, string vchPassword)
        {
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_validateloginparams_u", vchLoginNameParameter, vchPasswordParameter);
        }
    
        public virtual int dt_vcsenabled()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_vcsenabled");
        }
    
        public virtual ObjectResult<Nullable<int>> dt_verstamp006()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("dt_verstamp006");
        }
    
        public virtual ObjectResult<Nullable<int>> dt_verstamp007()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("dt_verstamp007");
        }
    
        public virtual int dt_whocheckedout(string chObjectType, string vchObjectName, string vchLoginName, string vchPassword)
        {
            var chObjectTypeParameter = chObjectType != null ?
                new ObjectParameter("chObjectType", chObjectType) :
                new ObjectParameter("chObjectType", typeof(string));
    
            var vchObjectNameParameter = vchObjectName != null ?
                new ObjectParameter("vchObjectName", vchObjectName) :
                new ObjectParameter("vchObjectName", typeof(string));
    
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_whocheckedout", chObjectTypeParameter, vchObjectNameParameter, vchLoginNameParameter, vchPasswordParameter);
        }
    
        public virtual int dt_whocheckedout_u(string chObjectType, string vchObjectName, string vchLoginName, string vchPassword)
        {
            var chObjectTypeParameter = chObjectType != null ?
                new ObjectParameter("chObjectType", chObjectType) :
                new ObjectParameter("chObjectType", typeof(string));
    
            var vchObjectNameParameter = vchObjectName != null ?
                new ObjectParameter("vchObjectName", vchObjectName) :
                new ObjectParameter("vchObjectName", typeof(string));
    
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_whocheckedout_u", chObjectTypeParameter, vchObjectNameParameter, vchLoginNameParameter, vchPasswordParameter);
        }
    
        public virtual ObjectResult<Ejecuta_Async_Result> Ejecuta_Async(string sql, string jobname)
        {
            var sqlParameter = sql != null ?
                new ObjectParameter("sql", sql) :
                new ObjectParameter("sql", typeof(string));
    
            var jobnameParameter = jobname != null ?
                new ObjectParameter("jobname", jobname) :
                new ObjectParameter("jobname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Ejecuta_Async_Result>("Ejecuta_Async", sqlParameter, jobnameParameter);
        }
    
        public virtual int EnviaEmailListadoVentas(Nullable<int> diaID)
        {
            var diaIDParameter = diaID.HasValue ?
                new ObjectParameter("DiaID", diaID) :
                new ObjectParameter("DiaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EnviaEmailListadoVentas", diaIDParameter);
        }
    
        public virtual int EnviaEmailPremiosPagados(Nullable<int> diaID)
        {
            var diaIDParameter = diaID.HasValue ?
                new ObjectParameter("DiaID", diaID) :
                new ObjectParameter("DiaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EnviaEmailPremiosPagados", diaIDParameter);
        }
    
        public virtual ObjectResult<GetBancas_Result> GetBancas(Nullable<int> soloVivas)
        {
            var soloVivasParameter = soloVivas.HasValue ?
                new ObjectParameter("SoloVivas", soloVivas) :
                new ObjectParameter("SoloVivas", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBancas_Result>("GetBancas", soloVivasParameter);
        }
    
        public virtual ObjectResult<GridBancas_Result> GridBancas()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GridBancas_Result>("GridBancas");
        }
    
        public virtual ObjectResult<GridBancas6_Result> GridBancas6()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GridBancas6_Result>("GridBancas6");
        }
    
        public virtual ObjectResult<GridBancas7_Result> GridBancas7()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GridBancas7_Result>("GridBancas7");
        }
    
        public virtual ObjectResult<GridBancasFilt_Result> GridBancasFilt(string search)
        {
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GridBancasFilt_Result>("GridBancasFilt", searchParameter);
        }
    
        public virtual ObjectResult<GridBilleteBanca7_Result> GridBilleteBanca7(Nullable<bool> diaActivo, Nullable<System.DateTime> dia, Nullable<int> riferoID)
        {
            var diaActivoParameter = diaActivo.HasValue ?
                new ObjectParameter("DiaActivo", diaActivo) :
                new ObjectParameter("DiaActivo", typeof(bool));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("Dia", dia) :
                new ObjectParameter("Dia", typeof(System.DateTime));
    
            var riferoIDParameter = riferoID.HasValue ?
                new ObjectParameter("RiferoID", riferoID) :
                new ObjectParameter("RiferoID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GridBilleteBanca7_Result>("GridBilleteBanca7", diaActivoParameter, diaParameter, riferoIDParameter);
        }
    
        public virtual ObjectResult<GridBilleteSuplidor7_Result> GridBilleteSuplidor7(Nullable<bool> diaActivo, Nullable<System.DateTime> dia, Nullable<int> riferoID)
        {
            var diaActivoParameter = diaActivo.HasValue ?
                new ObjectParameter("DiaActivo", diaActivo) :
                new ObjectParameter("DiaActivo", typeof(bool));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("Dia", dia) :
                new ObjectParameter("Dia", typeof(System.DateTime));
    
            var riferoIDParameter = riferoID.HasValue ?
                new ObjectParameter("RiferoID", riferoID) :
                new ObjectParameter("RiferoID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GridBilleteSuplidor7_Result>("GridBilleteSuplidor7", diaActivoParameter, diaParameter, riferoIDParameter);
        }
    
        public virtual ObjectResult<GridDias7_Result> GridDias7(Nullable<int> topDCount)
        {
            var topDCountParameter = topDCount.HasValue ?
                new ObjectParameter("TopDCount", topDCount) :
                new ObjectParameter("TopDCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GridDias7_Result>("GridDias7", topDCountParameter);
        }
    
        public virtual ObjectResult<GridPagosBanca7_Result> GridPagosBanca7(Nullable<bool> diaActivo, Nullable<System.DateTime> dia, Nullable<int> riferoID, string productosIDs)
        {
            var diaActivoParameter = diaActivo.HasValue ?
                new ObjectParameter("DiaActivo", diaActivo) :
                new ObjectParameter("DiaActivo", typeof(bool));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("Dia", dia) :
                new ObjectParameter("Dia", typeof(System.DateTime));
    
            var riferoIDParameter = riferoID.HasValue ?
                new ObjectParameter("RiferoID", riferoID) :
                new ObjectParameter("RiferoID", typeof(int));
    
            var productosIDsParameter = productosIDs != null ?
                new ObjectParameter("ProductosIDs", productosIDs) :
                new ObjectParameter("ProductosIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GridPagosBanca7_Result>("GridPagosBanca7", diaActivoParameter, diaParameter, riferoIDParameter, productosIDsParameter);
        }
    
        public virtual ObjectResult<GridPagosSuplidor7_Result> GridPagosSuplidor7(Nullable<bool> diaActivo, Nullable<System.DateTime> dia, Nullable<int> riferoID, string productosIDs)
        {
            var diaActivoParameter = diaActivo.HasValue ?
                new ObjectParameter("DiaActivo", diaActivo) :
                new ObjectParameter("DiaActivo", typeof(bool));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("Dia", dia) :
                new ObjectParameter("Dia", typeof(System.DateTime));
    
            var riferoIDParameter = riferoID.HasValue ?
                new ObjectParameter("RiferoID", riferoID) :
                new ObjectParameter("RiferoID", typeof(int));
    
            var productosIDsParameter = productosIDs != null ?
                new ObjectParameter("ProductosIDs", productosIDs) :
                new ObjectParameter("ProductosIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GridPagosSuplidor7_Result>("GridPagosSuplidor7", diaActivoParameter, diaParameter, riferoIDParameter, productosIDsParameter);
        }
    
        public virtual ObjectResult<GridRecargaBanca7_Result> GridRecargaBanca7(Nullable<bool> diaActivo, Nullable<System.DateTime> dia, Nullable<int> riferoID)
        {
            var diaActivoParameter = diaActivo.HasValue ?
                new ObjectParameter("DiaActivo", diaActivo) :
                new ObjectParameter("DiaActivo", typeof(bool));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("Dia", dia) :
                new ObjectParameter("Dia", typeof(System.DateTime));
    
            var riferoIDParameter = riferoID.HasValue ?
                new ObjectParameter("RiferoID", riferoID) :
                new ObjectParameter("RiferoID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GridRecargaBanca7_Result>("GridRecargaBanca7", diaActivoParameter, diaParameter, riferoIDParameter);
        }
    
        public virtual ObjectResult<GridRecargasPorCuentaID_Result> GridRecargasPorCuentaID(Nullable<System.DateTime> des, Nullable<System.DateTime> has, string ord, string cuentaID)
        {
            var desParameter = des.HasValue ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(System.DateTime));
    
            var hasParameter = has.HasValue ?
                new ObjectParameter("has", has) :
                new ObjectParameter("has", typeof(System.DateTime));
    
            var ordParameter = ord != null ?
                new ObjectParameter("ord", ord) :
                new ObjectParameter("ord", typeof(string));
    
            var cuentaIDParameter = cuentaID != null ?
                new ObjectParameter("cuentaID", cuentaID) :
                new ObjectParameter("cuentaID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GridRecargasPorCuentaID_Result>("GridRecargasPorCuentaID", desParameter, hasParameter, ordParameter, cuentaIDParameter);
        }
    
        public virtual ObjectResult<GridRecargaSuplidor7_Result> GridRecargaSuplidor7(Nullable<bool> diaActivo, Nullable<System.DateTime> dia, Nullable<int> riferoID)
        {
            var diaActivoParameter = diaActivo.HasValue ?
                new ObjectParameter("DiaActivo", diaActivo) :
                new ObjectParameter("DiaActivo", typeof(bool));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("Dia", dia) :
                new ObjectParameter("Dia", typeof(System.DateTime));
    
            var riferoIDParameter = riferoID.HasValue ?
                new ObjectParameter("RiferoID", riferoID) :
                new ObjectParameter("RiferoID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GridRecargaSuplidor7_Result>("GridRecargaSuplidor7", diaActivoParameter, diaParameter, riferoIDParameter);
        }
    
        public virtual ObjectResult<GridRiferos7_Result> GridRiferos7()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GridRiferos7_Result>("GridRiferos7");
        }
    
        public virtual ObjectResult<GridVentaLocal7_Result> GridVentaLocal7(Nullable<System.DateTime> eDiFecha, Nullable<System.DateTime> resCierre)
        {
            var eDiFechaParameter = eDiFecha.HasValue ?
                new ObjectParameter("EDiFecha", eDiFecha) :
                new ObjectParameter("EDiFecha", typeof(System.DateTime));
    
            var resCierreParameter = resCierre.HasValue ?
                new ObjectParameter("ResCierre", resCierre) :
                new ObjectParameter("ResCierre", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GridVentaLocal7_Result>("GridVentaLocal7", eDiFechaParameter, resCierreParameter);
        }
    
        public virtual int GridVentas7(Nullable<int> riferoId, Nullable<bool> diaActivo, Nullable<System.DateTime> dia, Nullable<int> topPCount, Nullable<int> topTCount, Nullable<int> loteriaQ, Nullable<int> loteriaP, Nullable<int> loteriaT, Nullable<int> bancaId)
        {
            var riferoIdParameter = riferoId.HasValue ?
                new ObjectParameter("RiferoId", riferoId) :
                new ObjectParameter("RiferoId", typeof(int));
    
            var diaActivoParameter = diaActivo.HasValue ?
                new ObjectParameter("DiaActivo", diaActivo) :
                new ObjectParameter("DiaActivo", typeof(bool));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("Dia", dia) :
                new ObjectParameter("Dia", typeof(System.DateTime));
    
            var topPCountParameter = topPCount.HasValue ?
                new ObjectParameter("TopPCount", topPCount) :
                new ObjectParameter("TopPCount", typeof(int));
    
            var topTCountParameter = topTCount.HasValue ?
                new ObjectParameter("TopTCount", topTCount) :
                new ObjectParameter("TopTCount", typeof(int));
    
            var loteriaQParameter = loteriaQ.HasValue ?
                new ObjectParameter("LoteriaQ", loteriaQ) :
                new ObjectParameter("LoteriaQ", typeof(int));
    
            var loteriaPParameter = loteriaP.HasValue ?
                new ObjectParameter("LoteriaP", loteriaP) :
                new ObjectParameter("LoteriaP", typeof(int));
    
            var loteriaTParameter = loteriaT.HasValue ?
                new ObjectParameter("LoteriaT", loteriaT) :
                new ObjectParameter("LoteriaT", typeof(int));
    
            var bancaIdParameter = bancaId.HasValue ?
                new ObjectParameter("BancaId", bancaId) :
                new ObjectParameter("BancaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GridVentas7", riferoIdParameter, diaActivoParameter, diaParameter, topPCountParameter, topTCountParameter, loteriaQParameter, loteriaPParameter, loteriaTParameter, bancaIdParameter);
        }
    
        public virtual int PagaLocal(Nullable<System.DateTime> fecha, Nullable<int> loteria)
        {
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var loteriaParameter = loteria.HasValue ?
                new ObjectParameter("Loteria", loteria) :
                new ObjectParameter("Loteria", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PagaLocal", fechaParameter, loteriaParameter);
        }
    }
}
